
Mini_Project_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002860  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000140  00800060  00002860  000028f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008001a0  008001a0  00002a34  2**0
                  ALLOC
  3 .stab         000027e4  00000000  00000000  00002a34  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f22  00000000  00000000  00005218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000613a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000062da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000064cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  000088d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00009c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000ae34  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000aff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000b2ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bc58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e6       	ldi	r30, 0x60	; 96
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3a       	cpi	r26, 0xA0	; 160
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 ea       	ldi	r26, 0xA0	; 160
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3a       	cpi	r26, 0xA9	; 169
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <main>
      8a:	0c 94 2e 14 	jmp	0x285c	; 0x285c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e9       	ldi	r26, 0x98	; 152
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e2 13 	jmp	0x27c4	; 0x27c4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e9       	ldi	r24, 0x98	; 152
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e2 13 	jmp	0x27c4	; 0x27c4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ce 13 	jmp	0x279c	; 0x279c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 e9       	ldi	r22, 0x98	; 152
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 ce 13 	jmp	0x279c	; 0x279c <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e0 56       	subi	r30, 0x60	; 96
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <DcMotor_Init>:
#include"PWM.h"
#include <avr/io.h>


void DcMotor_Init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(FAN_PORT,FAN_PIN_1 ,PIN_OUTPUT);
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(FAN_PORT,FAN_PIN_2 ,PIN_OUTPUT);
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	61 e0       	ldi	r22, 0x01	; 1
     e44:	41 e0       	ldi	r20, 0x01	; 1
     e46:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(FAN_PORT,FAN_PIN_EN ,PIN_OUTPUT);
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	63 e0       	ldi	r22, 0x03	; 3
     e4e:	41 e0       	ldi	r20, 0x01	; 1
     e50:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <GPIO_setupPinDirection>

	GPIO_writePin(FAN_PORT, FAN_PIN_1, LOGIC_LOW);
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	40 e0       	ldi	r20, 0x00	; 0
     e5a:	0e 94 bd 0b 	call	0x177a	; 0x177a <GPIO_writePin>
	GPIO_writePin(FAN_PORT, FAN_PIN_2, LOGIC_LOW);
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	61 e0       	ldi	r22, 0x01	; 1
     e62:	40 e0       	ldi	r20, 0x00	; 0
     e64:	0e 94 bd 0b 	call	0x177a	; 0x177a <GPIO_writePin>
}
     e68:	cf 91       	pop	r28
     e6a:	df 91       	pop	r29
     e6c:	08 95       	ret

00000e6e <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
     e6e:	df 93       	push	r29
     e70:	cf 93       	push	r28
     e72:	00 d0       	rcall	.+0      	; 0xe74 <DcMotor_Rotate+0x6>
     e74:	00 d0       	rcall	.+0      	; 0xe76 <DcMotor_Rotate+0x8>
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
     e7a:	89 83       	std	Y+1, r24	; 0x01
     e7c:	6a 83       	std	Y+2, r22	; 0x02
	PWM_Timer0_Start(speed);
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	0e 94 b7 08 	call	0x116e	; 0x116e <PWM_Timer0_Start>
	switch (state)
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	3c 83       	std	Y+4, r19	; 0x04
     e8c:	2b 83       	std	Y+3, r18	; 0x03
     e8e:	8b 81       	ldd	r24, Y+3	; 0x03
     e90:	9c 81       	ldd	r25, Y+4	; 0x04
     e92:	81 30       	cpi	r24, 0x01	; 1
     e94:	91 05       	cpc	r25, r1
     e96:	a1 f0       	breq	.+40     	; 0xec0 <DcMotor_Rotate+0x52>
     e98:	2b 81       	ldd	r18, Y+3	; 0x03
     e9a:	3c 81       	ldd	r19, Y+4	; 0x04
     e9c:	22 30       	cpi	r18, 0x02	; 2
     e9e:	31 05       	cpc	r19, r1
     ea0:	d1 f0       	breq	.+52     	; 0xed6 <DcMotor_Rotate+0x68>
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	9c 81       	ldd	r25, Y+4	; 0x04
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	09 f5       	brne	.+66     	; 0xeec <DcMotor_Rotate+0x7e>
	{
	case 0:
		GPIO_writePin(FAN_PORT, FAN_PIN_1, LOGIC_LOW);
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	40 e0       	ldi	r20, 0x00	; 0
     eb0:	0e 94 bd 0b 	call	0x177a	; 0x177a <GPIO_writePin>
		GPIO_writePin(FAN_PORT, FAN_PIN_2, LOGIC_HIGH);
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	61 e0       	ldi	r22, 0x01	; 1
     eb8:	41 e0       	ldi	r20, 0x01	; 1
     eba:	0e 94 bd 0b 	call	0x177a	; 0x177a <GPIO_writePin>
     ebe:	16 c0       	rjmp	.+44     	; 0xeec <DcMotor_Rotate+0x7e>
		break;

	case 1:
		GPIO_writePin(FAN_PORT, FAN_PIN_1, LOGIC_HIGH);
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	41 e0       	ldi	r20, 0x01	; 1
     ec6:	0e 94 bd 0b 	call	0x177a	; 0x177a <GPIO_writePin>
		GPIO_writePin(FAN_PORT, FAN_PIN_2, LOGIC_LOW);
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	61 e0       	ldi	r22, 0x01	; 1
     ece:	40 e0       	ldi	r20, 0x00	; 0
     ed0:	0e 94 bd 0b 	call	0x177a	; 0x177a <GPIO_writePin>
     ed4:	0b c0       	rjmp	.+22     	; 0xeec <DcMotor_Rotate+0x7e>
		break;

	case 2:
		GPIO_writePin(FAN_PORT, FAN_PIN_1, LOGIC_LOW);
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	40 e0       	ldi	r20, 0x00	; 0
     edc:	0e 94 bd 0b 	call	0x177a	; 0x177a <GPIO_writePin>
		GPIO_writePin(FAN_PORT, FAN_PIN_2, LOGIC_LOW);
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	61 e0       	ldi	r22, 0x01	; 1
     ee4:	40 e0       	ldi	r20, 0x00	; 0
     ee6:	0e 94 bd 0b 	call	0x177a	; 0x177a <GPIO_writePin>
		speed = 0;  // Set speed to 0 to stop PWM
     eea:	1a 82       	std	Y+2, r1	; 0x02
		break;
	default:
		break;

	}
}
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	cf 91       	pop	r28
     ef6:	df 91       	pop	r29
     ef8:	08 95       	ret

00000efa <LDR_getLightIntensity>:
#include "LDR.h"
#include "adc.h"

uint16 LDR_getLightIntensity(void)
{
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	00 d0       	rcall	.+0      	; 0xf00 <LDR_getLightIntensity+0x6>
     f00:	0f 92       	push	r0
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
	uint8 lightIntensity = 0;
     f06:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adcValue = 0;
     f08:	1a 82       	std	Y+2, r1	; 0x02
     f0a:	19 82       	std	Y+1, r1	; 0x01

	adcValue = ADC_readChannel(LDR_SENSOR_CHANNEL_ID );
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	0e 94 57 0a 	call	0x14ae	; 0x14ae <ADC_readChannel>
     f12:	9a 83       	std	Y+2, r25	; 0x02
     f14:	89 83       	std	Y+1, r24	; 0x01

	lightIntensity = (uint8)(((uint32)adcValue*LDR_SENSOR_MAX_LIGHT_INTENSITY*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*LDR_SENSOR_MAX_VOLT_VALUE));
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	9a 81       	ldd	r25, Y+2	; 0x02
     f1a:	cc 01       	movw	r24, r24
     f1c:	a0 e0       	ldi	r26, 0x00	; 0
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	24 e6       	ldi	r18, 0x64	; 100
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	50 e0       	ldi	r21, 0x00	; 0
     f28:	bc 01       	movw	r22, r24
     f2a:	cd 01       	movw	r24, r26
     f2c:	0e 94 80 13 	call	0x2700	; 0x2700 <__mulsi3>
     f30:	dc 01       	movw	r26, r24
     f32:	cb 01       	movw	r24, r22
     f34:	bc 01       	movw	r22, r24
     f36:	cd 01       	movw	r24, r26
     f38:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	bc 01       	movw	r22, r24
     f42:	cd 01       	movw	r24, r26
     f44:	2a e0       	ldi	r18, 0x0A	; 10
     f46:	37 ed       	ldi	r19, 0xD7	; 215
     f48:	43 e2       	ldi	r20, 0x23	; 35
     f4a:	50 e4       	ldi	r21, 0x40	; 64
     f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	bc 01       	movw	r22, r24
     f56:	cd 01       	movw	r24, r26
     f58:	24 e1       	ldi	r18, 0x14	; 20
     f5a:	3e ea       	ldi	r19, 0xAE	; 174
     f5c:	43 e2       	ldi	r20, 0x23	; 35
     f5e:	55 e4       	ldi	r21, 0x45	; 69
     f60:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f64:	dc 01       	movw	r26, r24
     f66:	cb 01       	movw	r24, r22
     f68:	bc 01       	movw	r22, r24
     f6a:	cd 01       	movw	r24, r26
     f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	8b 83       	std	Y+3, r24	; 0x03

	return lightIntensity;
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	88 2f       	mov	r24, r24
     f7a:	90 e0       	ldi	r25, 0x00	; 0

}
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <LEDS_init>:
} LED_ConfigType;

LED_ConfigType ledConfig[3];


void LEDS_init(void) {
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	00 d0       	rcall	.+0      	; 0xf8e <LEDS_init+0x6>
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
	ledConfig[LED_RED].port = LED_PORT;
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	80 93 a0 01 	sts	0x01A0, r24
	ledConfig[LED_RED].pin = RED_LED_PIN;
     f98:	85 e0       	ldi	r24, 0x05	; 5
     f9a:	80 93 a1 01 	sts	0x01A1, r24
	ledConfig[LED_RED].logic = LOGIC;
     f9e:	10 92 a2 01 	sts	0x01A2, r1

	ledConfig[LED_GREEN].port = LED_PORT;
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	80 93 a3 01 	sts	0x01A3, r24
	ledConfig[LED_GREEN].pin = GREEN_LED_PIN;
     fa8:	86 e0       	ldi	r24, 0x06	; 6
     faa:	80 93 a4 01 	sts	0x01A4, r24
	ledConfig[LED_GREEN].logic = LOGIC;
     fae:	10 92 a5 01 	sts	0x01A5, r1

	ledConfig[LED_BLUE].port = LED_PORT;
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	80 93 a6 01 	sts	0x01A6, r24
	ledConfig[LED_BLUE].pin = BLUE_LED_PIN;
     fb8:	87 e0       	ldi	r24, 0x07	; 7
     fba:	80 93 a7 01 	sts	0x01A7, r24
	ledConfig[LED_BLUE].logic = LOGIC;
     fbe:	10 92 a8 01 	sts	0x01A8, r1

	for (int i = 0; i < 3; i++)
     fc2:	1a 82       	std	Y+2, r1	; 0x02
     fc4:	19 82       	std	Y+1, r1	; 0x01
     fc6:	23 c0       	rjmp	.+70     	; 0x100e <LEDS_init+0x86>
	{
		GPIO_setupPinDirection(ledConfig[i].port, ledConfig[i].pin, PIN_OUTPUT);
     fc8:	29 81       	ldd	r18, Y+1	; 0x01
     fca:	3a 81       	ldd	r19, Y+2	; 0x02
     fcc:	c9 01       	movw	r24, r18
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	82 0f       	add	r24, r18
     fd4:	93 1f       	adc	r25, r19
     fd6:	fc 01       	movw	r30, r24
     fd8:	e0 56       	subi	r30, 0x60	; 96
     fda:	fe 4f       	sbci	r31, 0xFE	; 254
     fdc:	40 81       	ld	r20, Z
     fde:	29 81       	ldd	r18, Y+1	; 0x01
     fe0:	3a 81       	ldd	r19, Y+2	; 0x02
     fe2:	c9 01       	movw	r24, r18
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	82 0f       	add	r24, r18
     fea:	93 1f       	adc	r25, r19
     fec:	fc 01       	movw	r30, r24
     fee:	ef 55       	subi	r30, 0x5F	; 95
     ff0:	fe 4f       	sbci	r31, 0xFE	; 254
     ff2:	90 81       	ld	r25, Z
     ff4:	84 2f       	mov	r24, r20
     ff6:	69 2f       	mov	r22, r25
     ff8:	41 e0       	ldi	r20, 0x01	; 1
     ffa:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <GPIO_setupPinDirection>
		LED_off(i);
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	0e 94 64 08 	call	0x10c8	; 0x10c8 <LED_off>

	ledConfig[LED_BLUE].port = LED_PORT;
	ledConfig[LED_BLUE].pin = BLUE_LED_PIN;
	ledConfig[LED_BLUE].logic = LOGIC;

	for (int i = 0; i < 3; i++)
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	9a 81       	ldd	r25, Y+2	; 0x02
    1008:	01 96       	adiw	r24, 0x01	; 1
    100a:	9a 83       	std	Y+2, r25	; 0x02
    100c:	89 83       	std	Y+1, r24	; 0x01
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	9a 81       	ldd	r25, Y+2	; 0x02
    1012:	83 30       	cpi	r24, 0x03	; 3
    1014:	91 05       	cpc	r25, r1
    1016:	c4 f2       	brlt	.-80     	; 0xfc8 <LEDS_init+0x40>
	{
		GPIO_setupPinDirection(ledConfig[i].port, ledConfig[i].pin, PIN_OUTPUT);
		LED_off(i);
	}
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	08 95       	ret

00001022 <LED_on>:

void LED_on(LED_ID id)
{
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	0f 92       	push	r0
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	89 83       	std	Y+1, r24	; 0x01
	if (ledConfig[id].logic == LOGIC)
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	c9 01       	movw	r24, r18
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	82 0f       	add	r24, r18
    103c:	93 1f       	adc	r25, r19
    103e:	fc 01       	movw	r30, r24
    1040:	ee 55       	subi	r30, 0x5E	; 94
    1042:	fe 4f       	sbci	r31, 0xFE	; 254
    1044:	80 81       	ld	r24, Z
    1046:	88 23       	and	r24, r24
    1048:	f1 f4       	brne	.+60     	; 0x1086 <LED_on+0x64>
	{
		GPIO_writePin(ledConfig[id].port, ledConfig[id].pin, 1);
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	c9 01       	movw	r24, r18
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	82 0f       	add	r24, r18
    1058:	93 1f       	adc	r25, r19
    105a:	fc 01       	movw	r30, r24
    105c:	e0 56       	subi	r30, 0x60	; 96
    105e:	fe 4f       	sbci	r31, 0xFE	; 254
    1060:	40 81       	ld	r20, Z
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	c9 01       	movw	r24, r18
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	82 0f       	add	r24, r18
    1070:	93 1f       	adc	r25, r19
    1072:	fc 01       	movw	r30, r24
    1074:	ef 55       	subi	r30, 0x5F	; 95
    1076:	fe 4f       	sbci	r31, 0xFE	; 254
    1078:	90 81       	ld	r25, Z
    107a:	84 2f       	mov	r24, r20
    107c:	69 2f       	mov	r22, r25
    107e:	41 e0       	ldi	r20, 0x01	; 1
    1080:	0e 94 bd 0b 	call	0x177a	; 0x177a <GPIO_writePin>
    1084:	1d c0       	rjmp	.+58     	; 0x10c0 <LED_on+0x9e>
	}
	else
	{
		GPIO_writePin(ledConfig[id].port, ledConfig[id].pin, 0);
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	c9 01       	movw	r24, r18
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	82 0f       	add	r24, r18
    1094:	93 1f       	adc	r25, r19
    1096:	fc 01       	movw	r30, r24
    1098:	e0 56       	subi	r30, 0x60	; 96
    109a:	fe 4f       	sbci	r31, 0xFE	; 254
    109c:	40 81       	ld	r20, Z
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	c9 01       	movw	r24, r18
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	82 0f       	add	r24, r18
    10ac:	93 1f       	adc	r25, r19
    10ae:	fc 01       	movw	r30, r24
    10b0:	ef 55       	subi	r30, 0x5F	; 95
    10b2:	fe 4f       	sbci	r31, 0xFE	; 254
    10b4:	90 81       	ld	r25, Z
    10b6:	84 2f       	mov	r24, r20
    10b8:	69 2f       	mov	r22, r25
    10ba:	40 e0       	ldi	r20, 0x00	; 0
    10bc:	0e 94 bd 0b 	call	0x177a	; 0x177a <GPIO_writePin>
	}
}
    10c0:	0f 90       	pop	r0
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	08 95       	ret

000010c8 <LED_off>:

void LED_off(LED_ID id)
{
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	0f 92       	push	r0
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	89 83       	std	Y+1, r24	; 0x01
	if (ledConfig[id].logic == LOGIC)
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	c9 01       	movw	r24, r18
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	82 0f       	add	r24, r18
    10e2:	93 1f       	adc	r25, r19
    10e4:	fc 01       	movw	r30, r24
    10e6:	ee 55       	subi	r30, 0x5E	; 94
    10e8:	fe 4f       	sbci	r31, 0xFE	; 254
    10ea:	80 81       	ld	r24, Z
    10ec:	88 23       	and	r24, r24
    10ee:	f1 f4       	brne	.+60     	; 0x112c <LED_off+0x64>
	{
		GPIO_writePin(ledConfig[id].port, ledConfig[id].pin, LOGIC_LOW);
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	c9 01       	movw	r24, r18
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	82 0f       	add	r24, r18
    10fe:	93 1f       	adc	r25, r19
    1100:	fc 01       	movw	r30, r24
    1102:	e0 56       	subi	r30, 0x60	; 96
    1104:	fe 4f       	sbci	r31, 0xFE	; 254
    1106:	40 81       	ld	r20, Z
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	c9 01       	movw	r24, r18
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	82 0f       	add	r24, r18
    1116:	93 1f       	adc	r25, r19
    1118:	fc 01       	movw	r30, r24
    111a:	ef 55       	subi	r30, 0x5F	; 95
    111c:	fe 4f       	sbci	r31, 0xFE	; 254
    111e:	90 81       	ld	r25, Z
    1120:	84 2f       	mov	r24, r20
    1122:	69 2f       	mov	r22, r25
    1124:	40 e0       	ldi	r20, 0x00	; 0
    1126:	0e 94 bd 0b 	call	0x177a	; 0x177a <GPIO_writePin>
    112a:	1d c0       	rjmp	.+58     	; 0x1166 <LED_off+0x9e>
	}
	else
	{
		GPIO_writePin(ledConfig[id].port, ledConfig[id].pin, LOGIC_HIGH);
    112c:	89 81       	ldd	r24, Y+1	; 0x01
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	c9 01       	movw	r24, r18
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	82 0f       	add	r24, r18
    113a:	93 1f       	adc	r25, r19
    113c:	fc 01       	movw	r30, r24
    113e:	e0 56       	subi	r30, 0x60	; 96
    1140:	fe 4f       	sbci	r31, 0xFE	; 254
    1142:	40 81       	ld	r20, Z
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	c9 01       	movw	r24, r18
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	82 0f       	add	r24, r18
    1152:	93 1f       	adc	r25, r19
    1154:	fc 01       	movw	r30, r24
    1156:	ef 55       	subi	r30, 0x5F	; 95
    1158:	fe 4f       	sbci	r31, 0xFE	; 254
    115a:	90 81       	ld	r25, Z
    115c:	84 2f       	mov	r24, r20
    115e:	69 2f       	mov	r22, r25
    1160:	41 e0       	ldi	r20, 0x01	; 1
    1162:	0e 94 bd 0b 	call	0x177a	; 0x177a <GPIO_writePin>
	}
}
    1166:	0f 90       	pop	r0
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	08 95       	ret

0000116e <PWM_Timer0_Start>:
#include"PWM.h"
#include <avr/io.h>


void PWM_Timer0_Start(uint8 duty_cycle)
{
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	0f 92       	push	r0
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; //Set Timer Initial value
    117a:	e2 e5       	ldi	r30, 0x52	; 82
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	10 82       	st	Z, r1

	OCR0  = (duty_cycle * 255) / 100; // Set Compare Value
    1180:	ec e5       	ldi	r30, 0x5C	; 92
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	48 2f       	mov	r20, r24
    1188:	50 e0       	ldi	r21, 0x00	; 0
    118a:	ca 01       	movw	r24, r20
    118c:	9c 01       	movw	r18, r24
    118e:	22 0f       	add	r18, r18
    1190:	33 1f       	adc	r19, r19
    1192:	c9 01       	movw	r24, r18
    1194:	96 95       	lsr	r25
    1196:	98 2f       	mov	r25, r24
    1198:	88 27       	eor	r24, r24
    119a:	97 95       	ror	r25
    119c:	87 95       	ror	r24
    119e:	82 1b       	sub	r24, r18
    11a0:	93 0b       	sbc	r25, r19
    11a2:	84 0f       	add	r24, r20
    11a4:	95 1f       	adc	r25, r21
    11a6:	24 e6       	ldi	r18, 0x64	; 100
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	b9 01       	movw	r22, r18
    11ac:	0e 94 9f 13 	call	0x273e	; 0x273e <__divmodhi4>
    11b0:	cb 01       	movw	r24, r22
    11b2:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    11b4:	a7 e3       	ldi	r26, 0x37	; 55
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e7 e3       	ldi	r30, 0x37	; 55
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	88 60       	ori	r24, 0x08	; 8
    11c0:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/1024 CS00=0 CS01=1 CS02=1
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS02)| (1<<CS00);
    11c2:	e3 e5       	ldi	r30, 0x53	; 83
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	8d e6       	ldi	r24, 0x6D	; 109
    11c8:	80 83       	st	Z, r24

}
    11ca:	0f 90       	pop	r0
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <main>:
#include "flameSensor.h"
#include"FAN.h"
#include"PWM.h"

int main(void)
{
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <main+0x6>
    11d8:	00 d0       	rcall	.+0      	; 0x11da <main+0x8>
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
	uint16 light_Intensity;
	uint8 temp;
	uint8 speed;
	LCD_init(); /* initialize LCD driver */
    11de:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <LCD_init>
	ADC_init(); /* initialize ADC driver */
    11e2:	0e 94 48 0a 	call	0x1490	; 0x1490 <ADC_init>
	LEDS_init();
    11e6:	0e 94 c4 07 	call	0xf88	; 0xf88 <LEDS_init>
	FlameSensor_init();
    11ea:	0e 94 b2 0a 	call	0x1564	; 0x1564 <FlameSensor_init>
	Buzzer_init();
    11ee:	0e 94 8e 0a 	call	0x151c	; 0x151c <Buzzer_init>
	DcMotor_Init();
    11f2:	0e 94 17 07 	call	0xe2e	; 0xe2e <DcMotor_Init>
	PWM_Timer0_Start(0);
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	0e 94 b7 08 	call	0x116e	; 0x116e <PWM_Timer0_Start>
	LCD_moveCursor(1,8);
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	68 e0       	ldi	r22, 0x08	; 8
    1200:	0e 94 b3 12 	call	0x2566	; 0x2566 <LCD_moveCursor>
	LCD_displayString("LDR=    ");
    1204:	80 e6       	ldi	r24, 0x60	; 96
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	0e 94 8a 12 	call	0x2514	; 0x2514 <LCD_displayString>
	LCD_moveCursor(1,15);
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	6f e0       	ldi	r22, 0x0F	; 15
    1210:	0e 94 b3 12 	call	0x2566	; 0x2566 <LCD_moveCursor>
	LCD_displayString("%");
    1214:	89 e6       	ldi	r24, 0x69	; 105
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	0e 94 8a 12 	call	0x2514	; 0x2514 <LCD_displayString>
	LCD_moveCursor(1,0);
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	60 e0       	ldi	r22, 0x00	; 0
    1220:	0e 94 b3 12 	call	0x2566	; 0x2566 <LCD_moveCursor>
	LCD_displayString("Temp=  ");
    1224:	8b e6       	ldi	r24, 0x6B	; 107
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	0e 94 8a 12 	call	0x2514	; 0x2514 <LCD_displayString>
	while(1)
	{


		light_Intensity = LDR_getLightIntensity();
    122c:	0e 94 7d 07 	call	0xefa	; 0xefa <LDR_getLightIntensity>
    1230:	9c 83       	std	Y+4, r25	; 0x04
    1232:	8b 83       	std	Y+3, r24	; 0x03
		LCD_moveCursor(1,12);
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	6c e0       	ldi	r22, 0x0C	; 12
    1238:	0e 94 b3 12 	call	0x2566	; 0x2566 <LCD_moveCursor>
		if(light_Intensity<15)
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	9c 81       	ldd	r25, Y+4	; 0x04
    1240:	8f 30       	cpi	r24, 0x0F	; 15
    1242:	91 05       	cpc	r25, r1
    1244:	88 f4       	brcc	.+34     	; 0x1268 <main+0x96>
		{
			LED_on(LED_RED);
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	0e 94 11 08 	call	0x1022	; 0x1022 <LED_on>
			LED_on(LED_GREEN);
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	0e 94 11 08 	call	0x1022	; 0x1022 <LED_on>
			LED_on(LED_BLUE);
    1252:	82 e0       	ldi	r24, 0x02	; 2
    1254:	0e 94 11 08 	call	0x1022	; 0x1022 <LED_on>
			LCD_intgerToString(light_Intensity);
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	9c 81       	ldd	r25, Y+4	; 0x04
    125c:	0e 94 0e 13 	call	0x261c	; 0x261c <LCD_intgerToString>
			LCD_displayCharacter(' ');
    1260:	80 e2       	ldi	r24, 0x20	; 32
    1262:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_displayCharacter>
    1266:	4e c0       	rjmp	.+156    	; 0x1304 <main+0x132>


		}
		else if(light_Intensity >= 16 && light_Intensity <= 50)
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	9c 81       	ldd	r25, Y+4	; 0x04
    126c:	80 31       	cpi	r24, 0x10	; 16
    126e:	91 05       	cpc	r25, r1
    1270:	98 f0       	brcs	.+38     	; 0x1298 <main+0xc6>
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	9c 81       	ldd	r25, Y+4	; 0x04
    1276:	83 33       	cpi	r24, 0x33	; 51
    1278:	91 05       	cpc	r25, r1
    127a:	70 f4       	brcc	.+28     	; 0x1298 <main+0xc6>
		{
			LED_on(LED_RED);
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	0e 94 11 08 	call	0x1022	; 0x1022 <LED_on>
			LED_on(LED_GREEN);
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	0e 94 11 08 	call	0x1022	; 0x1022 <LED_on>
			LED_off(LED_BLUE);
    1288:	82 e0       	ldi	r24, 0x02	; 2
    128a:	0e 94 64 08 	call	0x10c8	; 0x10c8 <LED_off>
			LCD_intgerToString(light_Intensity);
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	9c 81       	ldd	r25, Y+4	; 0x04
    1292:	0e 94 0e 13 	call	0x261c	; 0x261c <LCD_intgerToString>
    1296:	36 c0       	rjmp	.+108    	; 0x1304 <main+0x132>

		}
		else if(light_Intensity >= 51 && light_Intensity <= 70)
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	9c 81       	ldd	r25, Y+4	; 0x04
    129c:	83 33       	cpi	r24, 0x33	; 51
    129e:	91 05       	cpc	r25, r1
    12a0:	98 f0       	brcs	.+38     	; 0x12c8 <main+0xf6>
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	9c 81       	ldd	r25, Y+4	; 0x04
    12a6:	87 34       	cpi	r24, 0x47	; 71
    12a8:	91 05       	cpc	r25, r1
    12aa:	70 f4       	brcc	.+28     	; 0x12c8 <main+0xf6>
		{
			LED_on(LED_RED);
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	0e 94 11 08 	call	0x1022	; 0x1022 <LED_on>
			LED_off(LED_GREEN);
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	0e 94 64 08 	call	0x10c8	; 0x10c8 <LED_off>
			LED_off(LED_BLUE);
    12b8:	82 e0       	ldi	r24, 0x02	; 2
    12ba:	0e 94 64 08 	call	0x10c8	; 0x10c8 <LED_off>
			LCD_intgerToString(light_Intensity);
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	9c 81       	ldd	r25, Y+4	; 0x04
    12c2:	0e 94 0e 13 	call	0x261c	; 0x261c <LCD_intgerToString>
    12c6:	1e c0       	rjmp	.+60     	; 0x1304 <main+0x132>

		}
		else if(light_Intensity > 70)
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	9c 81       	ldd	r25, Y+4	; 0x04
    12cc:	87 34       	cpi	r24, 0x47	; 71
    12ce:	91 05       	cpc	r25, r1
    12d0:	c8 f0       	brcs	.+50     	; 0x1304 <main+0x132>
		{
			LED_off(LED_RED);
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	0e 94 64 08 	call	0x10c8	; 0x10c8 <LED_off>
			LED_off(LED_GREEN);
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	0e 94 64 08 	call	0x10c8	; 0x10c8 <LED_off>
			LED_off(LED_BLUE);
    12de:	82 e0       	ldi	r24, 0x02	; 2
    12e0:	0e 94 64 08 	call	0x10c8	; 0x10c8 <LED_off>
			LCD_intgerToString(light_Intensity);
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	9c 81       	ldd	r25, Y+4	; 0x04
    12e8:	0e 94 0e 13 	call	0x261c	; 0x261c <LCD_intgerToString>
			if(light_Intensity < 100)
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	9c 81       	ldd	r25, Y+4	; 0x04
    12f0:	84 36       	cpi	r24, 0x64	; 100
    12f2:	91 05       	cpc	r25, r1
    12f4:	38 f4       	brcc	.+14     	; 0x1304 <main+0x132>
			{
				LCD_moveCursor(1,14);
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	6e e0       	ldi	r22, 0x0E	; 14
    12fa:	0e 94 b3 12 	call	0x2566	; 0x2566 <LCD_moveCursor>
				LCD_displayCharacter(' ');
    12fe:	80 e2       	ldi	r24, 0x20	; 32
    1300:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_displayCharacter>
			}
		}

		if(FlameSensor_getValue())
    1304:	0e 94 be 0a 	call	0x157c	; 0x157c <FlameSensor_getValue>
    1308:	88 23       	and	r24, r24
    130a:	61 f1       	breq	.+88     	; 0x1364 <main+0x192>
		{
			Buzzer_on();
    130c:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Buzzer_on>
			LCD_clearScreen();
    1310:	0e 94 31 13 	call	0x2662	; 0x2662 <LCD_clearScreen>
    1314:	08 c0       	rjmp	.+16     	; 0x1326 <main+0x154>
			while(FlameSensor_getValue())
			{
				LCD_moveCursor(0,1);
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	61 e0       	ldi	r22, 0x01	; 1
    131a:	0e 94 b3 12 	call	0x2566	; 0x2566 <LCD_moveCursor>
				LCD_displayString("Critical Alert!");
    131e:	83 e7       	ldi	r24, 0x73	; 115
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	0e 94 8a 12 	call	0x2514	; 0x2514 <LCD_displayString>

		if(FlameSensor_getValue())
		{
			Buzzer_on();
			LCD_clearScreen();
			while(FlameSensor_getValue())
    1326:	0e 94 be 0a 	call	0x157c	; 0x157c <FlameSensor_getValue>
    132a:	88 23       	and	r24, r24
    132c:	a1 f7       	brne	.-24     	; 0x1316 <main+0x144>
			{
				LCD_moveCursor(0,1);
				LCD_displayString("Critical Alert!");
			}
			LCD_clearScreen();
    132e:	0e 94 31 13 	call	0x2662	; 0x2662 <LCD_clearScreen>
			LCD_moveCursor(1,8);
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	68 e0       	ldi	r22, 0x08	; 8
    1336:	0e 94 b3 12 	call	0x2566	; 0x2566 <LCD_moveCursor>
			LCD_displayString("LDR=    ");
    133a:	80 e6       	ldi	r24, 0x60	; 96
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	0e 94 8a 12 	call	0x2514	; 0x2514 <LCD_displayString>
			LCD_moveCursor(1,15);
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	6f e0       	ldi	r22, 0x0F	; 15
    1346:	0e 94 b3 12 	call	0x2566	; 0x2566 <LCD_moveCursor>
			LCD_displayString("%");
    134a:	89 e6       	ldi	r24, 0x69	; 105
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	0e 94 8a 12 	call	0x2514	; 0x2514 <LCD_displayString>
			LCD_moveCursor(1,0);
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	60 e0       	ldi	r22, 0x00	; 0
    1356:	0e 94 b3 12 	call	0x2566	; 0x2566 <LCD_moveCursor>
			LCD_displayString("Temp=  ");
    135a:	8b e6       	ldi	r24, 0x6B	; 107
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	0e 94 8a 12 	call	0x2514	; 0x2514 <LCD_displayString>
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <main+0x196>
		}
		else
		{
			Buzzer_off();
    1364:	0e 94 a6 0a 	call	0x154c	; 0x154c <Buzzer_off>
		}

		temp= LM35_getTemperature();
    1368:	0e 94 3b 13 	call	0x2676	; 0x2676 <LM35_getTemperature>
    136c:	8a 83       	std	Y+2, r24	; 0x02
		LCD_moveCursor(1,5);
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	65 e0       	ldi	r22, 0x05	; 5
    1372:	0e 94 b3 12 	call	0x2566	; 0x2566 <LCD_moveCursor>
		if(temp >= 100)
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	84 36       	cpi	r24, 0x64	; 100
    137a:	40 f0       	brcs	.+16     	; 0x138c <main+0x1ba>
		{
			temp=99;
    137c:	83 e6       	ldi	r24, 0x63	; 99
    137e:	8a 83       	std	Y+2, r24	; 0x02
			LCD_intgerToString(temp);
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	88 2f       	mov	r24, r24
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	0e 94 0e 13 	call	0x261c	; 0x261c <LCD_intgerToString>
    138a:	08 c0       	rjmp	.+16     	; 0x139c <main+0x1ca>
		}
		else
		{
			LCD_intgerToString(temp);
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	88 2f       	mov	r24, r24
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0e 94 0e 13 	call	0x261c	; 0x261c <LCD_intgerToString>
			/* In case the digital value is two or one digits print space in the next digit place */
			LCD_displayCharacter(' ');
    1396:	80 e2       	ldi	r24, 0x20	; 32
    1398:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_displayCharacter>
		}

		if(temp<25)
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	89 31       	cpi	r24, 0x19	; 25
    13a0:	90 f4       	brcc	.+36     	; 0x13c6 <main+0x1f4>
		{
			LCD_moveCursor(0,3);
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	63 e0       	ldi	r22, 0x03	; 3
    13a6:	0e 94 b3 12 	call	0x2566	; 0x2566 <LCD_moveCursor>
			LCD_displayString("FAN IS OFF");
    13aa:	83 e8       	ldi	r24, 0x83	; 131
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	0e 94 8a 12 	call	0x2514	; 0x2514 <LCD_displayString>
			if(speed==0)
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	88 23       	and	r24, r24
    13b6:	09 f4       	brne	.+2      	; 0x13ba <main+0x1e8>
    13b8:	39 cf       	rjmp	.-398    	; 0x122c <main+0x5a>
			{
				continue;
			}
			else
			{
				speed=0;
    13ba:	19 82       	std	Y+1, r1	; 0x01
			}
			DcMotor_Rotate(ST,speed);
    13bc:	82 e0       	ldi	r24, 0x02	; 2
    13be:	69 81       	ldd	r22, Y+1	; 0x01
    13c0:	0e 94 37 07 	call	0xe6e	; 0xe6e <DcMotor_Rotate>
    13c4:	33 cf       	rjmp	.-410    	; 0x122c <main+0x5a>

		}
		else if(temp>=25 && temp<30)
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	89 31       	cpi	r24, 0x19	; 25
    13ca:	c8 f0       	brcs	.+50     	; 0x13fe <main+0x22c>
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	8e 31       	cpi	r24, 0x1E	; 30
    13d0:	b0 f4       	brcc	.+44     	; 0x13fe <main+0x22c>
		{
			LCD_moveCursor(0,3);
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	63 e0       	ldi	r22, 0x03	; 3
    13d6:	0e 94 b3 12 	call	0x2566	; 0x2566 <LCD_moveCursor>
			LCD_displayString("FAN IS ON");
    13da:	8e e8       	ldi	r24, 0x8E	; 142
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	0e 94 8a 12 	call	0x2514	; 0x2514 <LCD_displayString>
			LCD_displayCharacter(' ');
    13e2:	80 e2       	ldi	r24, 0x20	; 32
    13e4:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_displayCharacter>
			if(speed==25)
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	89 31       	cpi	r24, 0x19	; 25
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <main+0x21e>
    13ee:	1e cf       	rjmp	.-452    	; 0x122c <main+0x5a>
			{
				continue;
			}
			else
			{
				speed=25;
    13f0:	89 e1       	ldi	r24, 0x19	; 25
    13f2:	89 83       	std	Y+1, r24	; 0x01
			}
			DcMotor_Rotate(CW,speed);
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	69 81       	ldd	r22, Y+1	; 0x01
    13f8:	0e 94 37 07 	call	0xe6e	; 0xe6e <DcMotor_Rotate>
    13fc:	17 cf       	rjmp	.-466    	; 0x122c <main+0x5a>

		}
		else if(temp>=30 && temp<35)
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	8e 31       	cpi	r24, 0x1E	; 30
    1402:	b0 f0       	brcs	.+44     	; 0x1430 <main+0x25e>
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	83 32       	cpi	r24, 0x23	; 35
    1408:	98 f4       	brcc	.+38     	; 0x1430 <main+0x25e>
		{
			LCD_moveCursor(0,3);
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	63 e0       	ldi	r22, 0x03	; 3
    140e:	0e 94 b3 12 	call	0x2566	; 0x2566 <LCD_moveCursor>
			LCD_displayString("FAN IS ON");
    1412:	8e e8       	ldi	r24, 0x8E	; 142
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	0e 94 8a 12 	call	0x2514	; 0x2514 <LCD_displayString>
			if(speed==50)
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	82 33       	cpi	r24, 0x32	; 50
    141e:	09 f4       	brne	.+2      	; 0x1422 <main+0x250>
    1420:	05 cf       	rjmp	.-502    	; 0x122c <main+0x5a>
				continue;

			}
			else
			{
				speed=50;
    1422:	82 e3       	ldi	r24, 0x32	; 50
    1424:	89 83       	std	Y+1, r24	; 0x01
			}
			DcMotor_Rotate(CW,speed);
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	69 81       	ldd	r22, Y+1	; 0x01
    142a:	0e 94 37 07 	call	0xe6e	; 0xe6e <DcMotor_Rotate>
    142e:	fe ce       	rjmp	.-516    	; 0x122c <main+0x5a>

		}
		else if(temp>=35 && temp<40)
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	83 32       	cpi	r24, 0x23	; 35
    1434:	b0 f0       	brcs	.+44     	; 0x1462 <main+0x290>
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	88 32       	cpi	r24, 0x28	; 40
    143a:	98 f4       	brcc	.+38     	; 0x1462 <main+0x290>
		{
			LCD_moveCursor(0,3);
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	63 e0       	ldi	r22, 0x03	; 3
    1440:	0e 94 b3 12 	call	0x2566	; 0x2566 <LCD_moveCursor>
			LCD_displayString("FAN IS ON");
    1444:	8e e8       	ldi	r24, 0x8E	; 142
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	0e 94 8a 12 	call	0x2514	; 0x2514 <LCD_displayString>
			if(speed==75)
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	8b 34       	cpi	r24, 0x4B	; 75
    1450:	09 f4       	brne	.+2      	; 0x1454 <main+0x282>
    1452:	ec ce       	rjmp	.-552    	; 0x122c <main+0x5a>
			{
				continue;
			}
			else
			{
				speed=75;
    1454:	8b e4       	ldi	r24, 0x4B	; 75
    1456:	89 83       	std	Y+1, r24	; 0x01
			}
			DcMotor_Rotate(CW,speed);
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	69 81       	ldd	r22, Y+1	; 0x01
    145c:	0e 94 37 07 	call	0xe6e	; 0xe6e <DcMotor_Rotate>
    1460:	e5 ce       	rjmp	.-566    	; 0x122c <main+0x5a>
		}
		else if(temp>=40)
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	88 32       	cpi	r24, 0x28	; 40
    1466:	08 f4       	brcc	.+2      	; 0x146a <main+0x298>
    1468:	e1 ce       	rjmp	.-574    	; 0x122c <main+0x5a>
		{
			LCD_moveCursor(0,3);
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	63 e0       	ldi	r22, 0x03	; 3
    146e:	0e 94 b3 12 	call	0x2566	; 0x2566 <LCD_moveCursor>
			LCD_displayString("FAN IS ON");
    1472:	8e e8       	ldi	r24, 0x8E	; 142
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	0e 94 8a 12 	call	0x2514	; 0x2514 <LCD_displayString>
			if(speed==100)
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	84 36       	cpi	r24, 0x64	; 100
    147e:	09 f4       	brne	.+2      	; 0x1482 <main+0x2b0>
    1480:	d5 ce       	rjmp	.-598    	; 0x122c <main+0x5a>
			{
				continue;
			}
			else
			{
				speed=100;
    1482:	84 e6       	ldi	r24, 0x64	; 100
    1484:	89 83       	std	Y+1, r24	; 0x01
			}
			DcMotor_Rotate(CW,speed);
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	69 81       	ldd	r22, Y+1	; 0x01
    148a:	0e 94 37 07 	call	0xe6e	; 0xe6e <DcMotor_Rotate>
    148e:	ce ce       	rjmp	.-612    	; 0x122c <main+0x5a>

00001490 <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(void)
{
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 01 to choose AVCC = 5v as reference voltage
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = (1<<REFS0) | (1<<REFS1) ;
    1498:	e7 e2       	ldi	r30, 0x27	; 39
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 ec       	ldi	r24, 0xC0	; 192
    149e:	80 83       	st	Z, r24
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 = 111 to choose ADC_Clock = F_CPU/128 = 16Mhz/128 = 125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
    14a0:	e6 e2       	ldi	r30, 0x26	; 38
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	87 e8       	ldi	r24, 0x87	; 135
    14a6:	80 83       	st	Z, r24
}
    14a8:	cf 91       	pop	r28
    14aa:	df 91       	pop	r29
    14ac:	08 95       	ret

000014ae <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
    14ae:	df 93       	push	r29
    14b0:	cf 93       	push	r28
    14b2:	0f 92       	push	r0
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	87 70       	andi	r24, 0x07	; 7
    14be:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
    14c0:	a7 e2       	ldi	r26, 0x27	; 39
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e7 e2       	ldi	r30, 0x27	; 39
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	80 7e       	andi	r24, 0xE0	; 224
    14cc:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
    14ce:	a7 e2       	ldi	r26, 0x27	; 39
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e7 e2       	ldi	r30, 0x27	; 39
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	90 81       	ld	r25, Z
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	89 2b       	or	r24, r25
    14dc:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* Start conversion write '1' to ADSC */
    14de:	a6 e2       	ldi	r26, 0x26	; 38
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e6 e2       	ldi	r30, 0x26	; 38
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	80 64       	ori	r24, 0x40	; 64
    14ea:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* Wait for conversion to complete, ADIF becomes '1' */
    14ec:	e6 e2       	ldi	r30, 0x26	; 38
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	88 2f       	mov	r24, r24
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	80 71       	andi	r24, 0x10	; 16
    14f8:	90 70       	andi	r25, 0x00	; 0
    14fa:	00 97       	sbiw	r24, 0x00	; 0
    14fc:	b9 f3       	breq	.-18     	; 0x14ec <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF); /* Clear ADIF by write '1' to it :) */
    14fe:	a6 e2       	ldi	r26, 0x26	; 38
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e6 e2       	ldi	r30, 0x26	; 38
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	80 61       	ori	r24, 0x10	; 16
    150a:	8c 93       	st	X, r24
	return ADC; /* Read the digital value from the data register */
    150c:	e4 e2       	ldi	r30, 0x24	; 36
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	91 81       	ldd	r25, Z+1	; 0x01
}
    1514:	0f 90       	pop	r0
    1516:	cf 91       	pop	r28
    1518:	df 91       	pop	r29
    151a:	08 95       	ret

0000151c <Buzzer_init>:
#include"buzzer.h"
#include "gpio.h"

void Buzzer_init(void)
{
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
    1524:	83 e0       	ldi	r24, 0x03	; 3
    1526:	63 e0       	ldi	r22, 0x03	; 3
    1528:	41 e0       	ldi	r20, 0x01	; 1
    152a:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <GPIO_setupPinDirection>
}
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <Buzzer_on>:

void Buzzer_on(void)
{
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
    153c:	83 e0       	ldi	r24, 0x03	; 3
    153e:	63 e0       	ldi	r22, 0x03	; 3
    1540:	41 e0       	ldi	r20, 0x01	; 1
    1542:	0e 94 bd 0b 	call	0x177a	; 0x177a <GPIO_writePin>
}
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	08 95       	ret

0000154c <Buzzer_off>:

void Buzzer_off(void)
{
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    1554:	83 e0       	ldi	r24, 0x03	; 3
    1556:	63 e0       	ldi	r22, 0x03	; 3
    1558:	40 e0       	ldi	r20, 0x00	; 0
    155a:	0e 94 bd 0b 	call	0x177a	; 0x177a <GPIO_writePin>
}
    155e:	cf 91       	pop	r28
    1560:	df 91       	pop	r29
    1562:	08 95       	ret

00001564 <FlameSensor_init>:
#include "flameSensor.h"
#include "gpio.h"
#include "common_macros.h" /* To use the macros like SET_BIT */

void FlameSensor_init(void)
{
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(FLAME_PORT,FLAME_PIN,PIN_INPUT);
    156c:	83 e0       	ldi	r24, 0x03	; 3
    156e:	62 e0       	ldi	r22, 0x02	; 2
    1570:	40 e0       	ldi	r20, 0x00	; 0
    1572:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <GPIO_setupPinDirection>
}
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	08 95       	ret

0000157c <FlameSensor_getValue>:

uint8 FlameSensor_getValue(void)
{
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	0f 92       	push	r0
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
	return (GPIO_readPin(FLAME_PORT,FLAME_PIN)) ? 1 : 0 ;
    1586:	83 e0       	ldi	r24, 0x03	; 3
    1588:	62 e0       	ldi	r22, 0x02	; 2
    158a:	0e 94 a8 0c 	call	0x1950	; 0x1950 <GPIO_readPin>
    158e:	89 83       	std	Y+1, r24	; 0x01
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	88 23       	and	r24, r24
    1594:	11 f0       	breq	.+4      	; 0x159a <FlameSensor_getValue+0x1e>
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	89 83       	std	Y+1, r24	; 0x01
    159a:	89 81       	ldd	r24, Y+1	; 0x01
}
    159c:	0f 90       	pop	r0
    159e:	cf 91       	pop	r28
    15a0:	df 91       	pop	r29
    15a2:	08 95       	ret

000015a4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	00 d0       	rcall	.+0      	; 0x15aa <GPIO_setupPinDirection+0x6>
    15aa:	00 d0       	rcall	.+0      	; 0x15ac <GPIO_setupPinDirection+0x8>
    15ac:	0f 92       	push	r0
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	89 83       	std	Y+1, r24	; 0x01
    15b4:	6a 83       	std	Y+2, r22	; 0x02
    15b6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	88 30       	cpi	r24, 0x08	; 8
    15bc:	08 f0       	brcs	.+2      	; 0x15c0 <GPIO_setupPinDirection+0x1c>
    15be:	d5 c0       	rjmp	.+426    	; 0x176a <GPIO_setupPinDirection+0x1c6>
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	84 30       	cpi	r24, 0x04	; 4
    15c4:	08 f0       	brcs	.+2      	; 0x15c8 <GPIO_setupPinDirection+0x24>
    15c6:	d1 c0       	rjmp	.+418    	; 0x176a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	3d 83       	std	Y+5, r19	; 0x05
    15d0:	2c 83       	std	Y+4, r18	; 0x04
    15d2:	8c 81       	ldd	r24, Y+4	; 0x04
    15d4:	9d 81       	ldd	r25, Y+5	; 0x05
    15d6:	81 30       	cpi	r24, 0x01	; 1
    15d8:	91 05       	cpc	r25, r1
    15da:	09 f4       	brne	.+2      	; 0x15de <GPIO_setupPinDirection+0x3a>
    15dc:	43 c0       	rjmp	.+134    	; 0x1664 <GPIO_setupPinDirection+0xc0>
    15de:	2c 81       	ldd	r18, Y+4	; 0x04
    15e0:	3d 81       	ldd	r19, Y+5	; 0x05
    15e2:	22 30       	cpi	r18, 0x02	; 2
    15e4:	31 05       	cpc	r19, r1
    15e6:	2c f4       	brge	.+10     	; 0x15f2 <GPIO_setupPinDirection+0x4e>
    15e8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ea:	9d 81       	ldd	r25, Y+5	; 0x05
    15ec:	00 97       	sbiw	r24, 0x00	; 0
    15ee:	71 f0       	breq	.+28     	; 0x160c <GPIO_setupPinDirection+0x68>
    15f0:	bc c0       	rjmp	.+376    	; 0x176a <GPIO_setupPinDirection+0x1c6>
    15f2:	2c 81       	ldd	r18, Y+4	; 0x04
    15f4:	3d 81       	ldd	r19, Y+5	; 0x05
    15f6:	22 30       	cpi	r18, 0x02	; 2
    15f8:	31 05       	cpc	r19, r1
    15fa:	09 f4       	brne	.+2      	; 0x15fe <GPIO_setupPinDirection+0x5a>
    15fc:	5f c0       	rjmp	.+190    	; 0x16bc <GPIO_setupPinDirection+0x118>
    15fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1600:	9d 81       	ldd	r25, Y+5	; 0x05
    1602:	83 30       	cpi	r24, 0x03	; 3
    1604:	91 05       	cpc	r25, r1
    1606:	09 f4       	brne	.+2      	; 0x160a <GPIO_setupPinDirection+0x66>
    1608:	85 c0       	rjmp	.+266    	; 0x1714 <GPIO_setupPinDirection+0x170>
    160a:	af c0       	rjmp	.+350    	; 0x176a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	81 30       	cpi	r24, 0x01	; 1
    1610:	a1 f4       	brne	.+40     	; 0x163a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1612:	aa e3       	ldi	r26, 0x3A	; 58
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	ea e3       	ldi	r30, 0x3A	; 58
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	48 2f       	mov	r20, r24
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	02 2e       	mov	r0, r18
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <GPIO_setupPinDirection+0x8c>
    162c:	88 0f       	add	r24, r24
    162e:	99 1f       	adc	r25, r25
    1630:	0a 94       	dec	r0
    1632:	e2 f7       	brpl	.-8      	; 0x162c <GPIO_setupPinDirection+0x88>
    1634:	84 2b       	or	r24, r20
    1636:	8c 93       	st	X, r24
    1638:	98 c0       	rjmp	.+304    	; 0x176a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    163a:	aa e3       	ldi	r26, 0x3A	; 58
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	ea e3       	ldi	r30, 0x3A	; 58
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	48 2f       	mov	r20, r24
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	02 2e       	mov	r0, r18
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <GPIO_setupPinDirection+0xb4>
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	0a 94       	dec	r0
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <GPIO_setupPinDirection+0xb0>
    165c:	80 95       	com	r24
    165e:	84 23       	and	r24, r20
    1660:	8c 93       	st	X, r24
    1662:	83 c0       	rjmp	.+262    	; 0x176a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	a1 f4       	brne	.+40     	; 0x1692 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    166a:	a7 e3       	ldi	r26, 0x37	; 55
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e7 e3       	ldi	r30, 0x37	; 55
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	48 2f       	mov	r20, r24
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	02 2e       	mov	r0, r18
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <GPIO_setupPinDirection+0xe4>
    1684:	88 0f       	add	r24, r24
    1686:	99 1f       	adc	r25, r25
    1688:	0a 94       	dec	r0
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <GPIO_setupPinDirection+0xe0>
    168c:	84 2b       	or	r24, r20
    168e:	8c 93       	st	X, r24
    1690:	6c c0       	rjmp	.+216    	; 0x176a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1692:	a7 e3       	ldi	r26, 0x37	; 55
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	e7 e3       	ldi	r30, 0x37	; 55
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	48 2f       	mov	r20, r24
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	02 2e       	mov	r0, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <GPIO_setupPinDirection+0x10c>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	0a 94       	dec	r0
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <GPIO_setupPinDirection+0x108>
    16b4:	80 95       	com	r24
    16b6:	84 23       	and	r24, r20
    16b8:	8c 93       	st	X, r24
    16ba:	57 c0       	rjmp	.+174    	; 0x176a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	81 30       	cpi	r24, 0x01	; 1
    16c0:	a1 f4       	brne	.+40     	; 0x16ea <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    16c2:	a4 e3       	ldi	r26, 0x34	; 52
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	e4 e3       	ldi	r30, 0x34	; 52
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	48 2f       	mov	r20, r24
    16ce:	8a 81       	ldd	r24, Y+2	; 0x02
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	02 2e       	mov	r0, r18
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <GPIO_setupPinDirection+0x13c>
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	0a 94       	dec	r0
    16e2:	e2 f7       	brpl	.-8      	; 0x16dc <GPIO_setupPinDirection+0x138>
    16e4:	84 2b       	or	r24, r20
    16e6:	8c 93       	st	X, r24
    16e8:	40 c0       	rjmp	.+128    	; 0x176a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    16ea:	a4 e3       	ldi	r26, 0x34	; 52
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e4 e3       	ldi	r30, 0x34	; 52
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	48 2f       	mov	r20, r24
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	02 2e       	mov	r0, r18
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <GPIO_setupPinDirection+0x164>
    1704:	88 0f       	add	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	0a 94       	dec	r0
    170a:	e2 f7       	brpl	.-8      	; 0x1704 <GPIO_setupPinDirection+0x160>
    170c:	80 95       	com	r24
    170e:	84 23       	and	r24, r20
    1710:	8c 93       	st	X, r24
    1712:	2b c0       	rjmp	.+86     	; 0x176a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	81 30       	cpi	r24, 0x01	; 1
    1718:	a1 f4       	brne	.+40     	; 0x1742 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    171a:	a1 e3       	ldi	r26, 0x31	; 49
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	e1 e3       	ldi	r30, 0x31	; 49
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	48 2f       	mov	r20, r24
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	02 2e       	mov	r0, r18
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <GPIO_setupPinDirection+0x194>
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	0a 94       	dec	r0
    173a:	e2 f7       	brpl	.-8      	; 0x1734 <GPIO_setupPinDirection+0x190>
    173c:	84 2b       	or	r24, r20
    173e:	8c 93       	st	X, r24
    1740:	14 c0       	rjmp	.+40     	; 0x176a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1742:	a1 e3       	ldi	r26, 0x31	; 49
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e1 e3       	ldi	r30, 0x31	; 49
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	48 2f       	mov	r20, r24
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	02 2e       	mov	r0, r18
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <GPIO_setupPinDirection+0x1bc>
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	0a 94       	dec	r0
    1762:	e2 f7       	brpl	.-8      	; 0x175c <GPIO_setupPinDirection+0x1b8>
    1764:	80 95       	com	r24
    1766:	84 23       	and	r24, r20
    1768:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	00 d0       	rcall	.+0      	; 0x1780 <GPIO_writePin+0x6>
    1780:	00 d0       	rcall	.+0      	; 0x1782 <GPIO_writePin+0x8>
    1782:	0f 92       	push	r0
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    1788:	89 83       	std	Y+1, r24	; 0x01
    178a:	6a 83       	std	Y+2, r22	; 0x02
    178c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	88 30       	cpi	r24, 0x08	; 8
    1792:	08 f0       	brcs	.+2      	; 0x1796 <GPIO_writePin+0x1c>
    1794:	d5 c0       	rjmp	.+426    	; 0x1940 <GPIO_writePin+0x1c6>
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	84 30       	cpi	r24, 0x04	; 4
    179a:	08 f0       	brcs	.+2      	; 0x179e <GPIO_writePin+0x24>
    179c:	d1 c0       	rjmp	.+418    	; 0x1940 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	28 2f       	mov	r18, r24
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	3d 83       	std	Y+5, r19	; 0x05
    17a6:	2c 83       	std	Y+4, r18	; 0x04
    17a8:	8c 81       	ldd	r24, Y+4	; 0x04
    17aa:	9d 81       	ldd	r25, Y+5	; 0x05
    17ac:	81 30       	cpi	r24, 0x01	; 1
    17ae:	91 05       	cpc	r25, r1
    17b0:	09 f4       	brne	.+2      	; 0x17b4 <GPIO_writePin+0x3a>
    17b2:	43 c0       	rjmp	.+134    	; 0x183a <GPIO_writePin+0xc0>
    17b4:	2c 81       	ldd	r18, Y+4	; 0x04
    17b6:	3d 81       	ldd	r19, Y+5	; 0x05
    17b8:	22 30       	cpi	r18, 0x02	; 2
    17ba:	31 05       	cpc	r19, r1
    17bc:	2c f4       	brge	.+10     	; 0x17c8 <GPIO_writePin+0x4e>
    17be:	8c 81       	ldd	r24, Y+4	; 0x04
    17c0:	9d 81       	ldd	r25, Y+5	; 0x05
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	71 f0       	breq	.+28     	; 0x17e2 <GPIO_writePin+0x68>
    17c6:	bc c0       	rjmp	.+376    	; 0x1940 <GPIO_writePin+0x1c6>
    17c8:	2c 81       	ldd	r18, Y+4	; 0x04
    17ca:	3d 81       	ldd	r19, Y+5	; 0x05
    17cc:	22 30       	cpi	r18, 0x02	; 2
    17ce:	31 05       	cpc	r19, r1
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <GPIO_writePin+0x5a>
    17d2:	5f c0       	rjmp	.+190    	; 0x1892 <GPIO_writePin+0x118>
    17d4:	8c 81       	ldd	r24, Y+4	; 0x04
    17d6:	9d 81       	ldd	r25, Y+5	; 0x05
    17d8:	83 30       	cpi	r24, 0x03	; 3
    17da:	91 05       	cpc	r25, r1
    17dc:	09 f4       	brne	.+2      	; 0x17e0 <GPIO_writePin+0x66>
    17de:	85 c0       	rjmp	.+266    	; 0x18ea <GPIO_writePin+0x170>
    17e0:	af c0       	rjmp	.+350    	; 0x1940 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	81 30       	cpi	r24, 0x01	; 1
    17e6:	a1 f4       	brne	.+40     	; 0x1810 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    17e8:	ab e3       	ldi	r26, 0x3B	; 59
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	eb e3       	ldi	r30, 0x3B	; 59
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	48 2f       	mov	r20, r24
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	02 2e       	mov	r0, r18
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <GPIO_writePin+0x8c>
    1802:	88 0f       	add	r24, r24
    1804:	99 1f       	adc	r25, r25
    1806:	0a 94       	dec	r0
    1808:	e2 f7       	brpl	.-8      	; 0x1802 <GPIO_writePin+0x88>
    180a:	84 2b       	or	r24, r20
    180c:	8c 93       	st	X, r24
    180e:	98 c0       	rjmp	.+304    	; 0x1940 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1810:	ab e3       	ldi	r26, 0x3B	; 59
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	eb e3       	ldi	r30, 0x3B	; 59
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	48 2f       	mov	r20, r24
    181c:	8a 81       	ldd	r24, Y+2	; 0x02
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	02 2e       	mov	r0, r18
    1828:	02 c0       	rjmp	.+4      	; 0x182e <GPIO_writePin+0xb4>
    182a:	88 0f       	add	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	0a 94       	dec	r0
    1830:	e2 f7       	brpl	.-8      	; 0x182a <GPIO_writePin+0xb0>
    1832:	80 95       	com	r24
    1834:	84 23       	and	r24, r20
    1836:	8c 93       	st	X, r24
    1838:	83 c0       	rjmp	.+262    	; 0x1940 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	81 30       	cpi	r24, 0x01	; 1
    183e:	a1 f4       	brne	.+40     	; 0x1868 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1840:	a8 e3       	ldi	r26, 0x38	; 56
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e8 e3       	ldi	r30, 0x38	; 56
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	48 2f       	mov	r20, r24
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	02 2e       	mov	r0, r18
    1858:	02 c0       	rjmp	.+4      	; 0x185e <GPIO_writePin+0xe4>
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	0a 94       	dec	r0
    1860:	e2 f7       	brpl	.-8      	; 0x185a <GPIO_writePin+0xe0>
    1862:	84 2b       	or	r24, r20
    1864:	8c 93       	st	X, r24
    1866:	6c c0       	rjmp	.+216    	; 0x1940 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1868:	a8 e3       	ldi	r26, 0x38	; 56
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	e8 e3       	ldi	r30, 0x38	; 56
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	48 2f       	mov	r20, r24
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	02 2e       	mov	r0, r18
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <GPIO_writePin+0x10c>
    1882:	88 0f       	add	r24, r24
    1884:	99 1f       	adc	r25, r25
    1886:	0a 94       	dec	r0
    1888:	e2 f7       	brpl	.-8      	; 0x1882 <GPIO_writePin+0x108>
    188a:	80 95       	com	r24
    188c:	84 23       	and	r24, r20
    188e:	8c 93       	st	X, r24
    1890:	57 c0       	rjmp	.+174    	; 0x1940 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
    1894:	81 30       	cpi	r24, 0x01	; 1
    1896:	a1 f4       	brne	.+40     	; 0x18c0 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1898:	a5 e3       	ldi	r26, 0x35	; 53
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e5 e3       	ldi	r30, 0x35	; 53
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	48 2f       	mov	r20, r24
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	02 2e       	mov	r0, r18
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <GPIO_writePin+0x13c>
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	0a 94       	dec	r0
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <GPIO_writePin+0x138>
    18ba:	84 2b       	or	r24, r20
    18bc:	8c 93       	st	X, r24
    18be:	40 c0       	rjmp	.+128    	; 0x1940 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    18c0:	a5 e3       	ldi	r26, 0x35	; 53
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	e5 e3       	ldi	r30, 0x35	; 53
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	48 2f       	mov	r20, r24
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	02 2e       	mov	r0, r18
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <GPIO_writePin+0x164>
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	0a 94       	dec	r0
    18e0:	e2 f7       	brpl	.-8      	; 0x18da <GPIO_writePin+0x160>
    18e2:	80 95       	com	r24
    18e4:	84 23       	and	r24, r20
    18e6:	8c 93       	st	X, r24
    18e8:	2b c0       	rjmp	.+86     	; 0x1940 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	81 30       	cpi	r24, 0x01	; 1
    18ee:	a1 f4       	brne	.+40     	; 0x1918 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    18f0:	a2 e3       	ldi	r26, 0x32	; 50
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	e2 e3       	ldi	r30, 0x32	; 50
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	48 2f       	mov	r20, r24
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	02 2e       	mov	r0, r18
    1908:	02 c0       	rjmp	.+4      	; 0x190e <GPIO_writePin+0x194>
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	0a 94       	dec	r0
    1910:	e2 f7       	brpl	.-8      	; 0x190a <GPIO_writePin+0x190>
    1912:	84 2b       	or	r24, r20
    1914:	8c 93       	st	X, r24
    1916:	14 c0       	rjmp	.+40     	; 0x1940 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1918:	a2 e3       	ldi	r26, 0x32	; 50
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e2 e3       	ldi	r30, 0x32	; 50
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	48 2f       	mov	r20, r24
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	02 2e       	mov	r0, r18
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <GPIO_writePin+0x1bc>
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	0a 94       	dec	r0
    1938:	e2 f7       	brpl	.-8      	; 0x1932 <GPIO_writePin+0x1b8>
    193a:	80 95       	com	r24
    193c:	84 23       	and	r24, r20
    193e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	0f 90       	pop	r0
    194a:	cf 91       	pop	r28
    194c:	df 91       	pop	r29
    194e:	08 95       	ret

00001950 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1950:	df 93       	push	r29
    1952:	cf 93       	push	r28
    1954:	00 d0       	rcall	.+0      	; 0x1956 <GPIO_readPin+0x6>
    1956:	00 d0       	rcall	.+0      	; 0x1958 <GPIO_readPin+0x8>
    1958:	0f 92       	push	r0
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
    195e:	8a 83       	std	Y+2, r24	; 0x02
    1960:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1962:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	88 30       	cpi	r24, 0x08	; 8
    1968:	08 f0       	brcs	.+2      	; 0x196c <GPIO_readPin+0x1c>
    196a:	84 c0       	rjmp	.+264    	; 0x1a74 <GPIO_readPin+0x124>
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	84 30       	cpi	r24, 0x04	; 4
    1970:	08 f0       	brcs	.+2      	; 0x1974 <GPIO_readPin+0x24>
    1972:	80 c0       	rjmp	.+256    	; 0x1a74 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	28 2f       	mov	r18, r24
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	3d 83       	std	Y+5, r19	; 0x05
    197c:	2c 83       	std	Y+4, r18	; 0x04
    197e:	4c 81       	ldd	r20, Y+4	; 0x04
    1980:	5d 81       	ldd	r21, Y+5	; 0x05
    1982:	41 30       	cpi	r20, 0x01	; 1
    1984:	51 05       	cpc	r21, r1
    1986:	79 f1       	breq	.+94     	; 0x19e6 <GPIO_readPin+0x96>
    1988:	8c 81       	ldd	r24, Y+4	; 0x04
    198a:	9d 81       	ldd	r25, Y+5	; 0x05
    198c:	82 30       	cpi	r24, 0x02	; 2
    198e:	91 05       	cpc	r25, r1
    1990:	34 f4       	brge	.+12     	; 0x199e <GPIO_readPin+0x4e>
    1992:	2c 81       	ldd	r18, Y+4	; 0x04
    1994:	3d 81       	ldd	r19, Y+5	; 0x05
    1996:	21 15       	cp	r18, r1
    1998:	31 05       	cpc	r19, r1
    199a:	69 f0       	breq	.+26     	; 0x19b6 <GPIO_readPin+0x66>
    199c:	6b c0       	rjmp	.+214    	; 0x1a74 <GPIO_readPin+0x124>
    199e:	4c 81       	ldd	r20, Y+4	; 0x04
    19a0:	5d 81       	ldd	r21, Y+5	; 0x05
    19a2:	42 30       	cpi	r20, 0x02	; 2
    19a4:	51 05       	cpc	r21, r1
    19a6:	b9 f1       	breq	.+110    	; 0x1a16 <GPIO_readPin+0xc6>
    19a8:	8c 81       	ldd	r24, Y+4	; 0x04
    19aa:	9d 81       	ldd	r25, Y+5	; 0x05
    19ac:	83 30       	cpi	r24, 0x03	; 3
    19ae:	91 05       	cpc	r25, r1
    19b0:	09 f4       	brne	.+2      	; 0x19b4 <GPIO_readPin+0x64>
    19b2:	49 c0       	rjmp	.+146    	; 0x1a46 <GPIO_readPin+0xf6>
    19b4:	5f c0       	rjmp	.+190    	; 0x1a74 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    19b6:	e9 e3       	ldi	r30, 0x39	; 57
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	28 2f       	mov	r18, r24
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	88 2f       	mov	r24, r24
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	a9 01       	movw	r20, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <GPIO_readPin+0x7e>
    19ca:	55 95       	asr	r21
    19cc:	47 95       	ror	r20
    19ce:	8a 95       	dec	r24
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <GPIO_readPin+0x7a>
    19d2:	ca 01       	movw	r24, r20
    19d4:	81 70       	andi	r24, 0x01	; 1
    19d6:	90 70       	andi	r25, 0x00	; 0
    19d8:	88 23       	and	r24, r24
    19da:	19 f0       	breq	.+6      	; 0x19e2 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	89 83       	std	Y+1, r24	; 0x01
    19e0:	49 c0       	rjmp	.+146    	; 0x1a74 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19e2:	19 82       	std	Y+1, r1	; 0x01
    19e4:	47 c0       	rjmp	.+142    	; 0x1a74 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    19e6:	e6 e3       	ldi	r30, 0x36	; 54
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	28 2f       	mov	r18, r24
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	88 2f       	mov	r24, r24
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	a9 01       	movw	r20, r18
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <GPIO_readPin+0xae>
    19fa:	55 95       	asr	r21
    19fc:	47 95       	ror	r20
    19fe:	8a 95       	dec	r24
    1a00:	e2 f7       	brpl	.-8      	; 0x19fa <GPIO_readPin+0xaa>
    1a02:	ca 01       	movw	r24, r20
    1a04:	81 70       	andi	r24, 0x01	; 1
    1a06:	90 70       	andi	r25, 0x00	; 0
    1a08:	88 23       	and	r24, r24
    1a0a:	19 f0       	breq	.+6      	; 0x1a12 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	89 83       	std	Y+1, r24	; 0x01
    1a10:	31 c0       	rjmp	.+98     	; 0x1a74 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a12:	19 82       	std	Y+1, r1	; 0x01
    1a14:	2f c0       	rjmp	.+94     	; 0x1a74 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1a16:	e3 e3       	ldi	r30, 0x33	; 51
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	28 2f       	mov	r18, r24
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	8b 81       	ldd	r24, Y+3	; 0x03
    1a22:	88 2f       	mov	r24, r24
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	a9 01       	movw	r20, r18
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <GPIO_readPin+0xde>
    1a2a:	55 95       	asr	r21
    1a2c:	47 95       	ror	r20
    1a2e:	8a 95       	dec	r24
    1a30:	e2 f7       	brpl	.-8      	; 0x1a2a <GPIO_readPin+0xda>
    1a32:	ca 01       	movw	r24, r20
    1a34:	81 70       	andi	r24, 0x01	; 1
    1a36:	90 70       	andi	r25, 0x00	; 0
    1a38:	88 23       	and	r24, r24
    1a3a:	19 f0       	breq	.+6      	; 0x1a42 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	89 83       	std	Y+1, r24	; 0x01
    1a40:	19 c0       	rjmp	.+50     	; 0x1a74 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a42:	19 82       	std	Y+1, r1	; 0x01
    1a44:	17 c0       	rjmp	.+46     	; 0x1a74 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1a46:	e0 e3       	ldi	r30, 0x30	; 48
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	88 2f       	mov	r24, r24
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	a9 01       	movw	r20, r18
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <GPIO_readPin+0x10e>
    1a5a:	55 95       	asr	r21
    1a5c:	47 95       	ror	r20
    1a5e:	8a 95       	dec	r24
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <GPIO_readPin+0x10a>
    1a62:	ca 01       	movw	r24, r20
    1a64:	81 70       	andi	r24, 0x01	; 1
    1a66:	90 70       	andi	r25, 0x00	; 0
    1a68:	88 23       	and	r24, r24
    1a6a:	19 f0       	breq	.+6      	; 0x1a72 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	89 83       	std	Y+1, r24	; 0x01
    1a70:	01 c0       	rjmp	.+2      	; 0x1a74 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a72:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	cf 91       	pop	r28
    1a82:	df 91       	pop	r29
    1a84:	08 95       	ret

00001a86 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	00 d0       	rcall	.+0      	; 0x1a8c <GPIO_setupPortDirection+0x6>
    1a8c:	00 d0       	rcall	.+0      	; 0x1a8e <GPIO_setupPortDirection+0x8>
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
    1a92:	89 83       	std	Y+1, r24	; 0x01
    1a94:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	84 30       	cpi	r24, 0x04	; 4
    1a9a:	90 f5       	brcc	.+100    	; 0x1b00 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	3c 83       	std	Y+4, r19	; 0x04
    1aa4:	2b 83       	std	Y+3, r18	; 0x03
    1aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aaa:	81 30       	cpi	r24, 0x01	; 1
    1aac:	91 05       	cpc	r25, r1
    1aae:	d1 f0       	breq	.+52     	; 0x1ae4 <GPIO_setupPortDirection+0x5e>
    1ab0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ab2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ab4:	22 30       	cpi	r18, 0x02	; 2
    1ab6:	31 05       	cpc	r19, r1
    1ab8:	2c f4       	brge	.+10     	; 0x1ac4 <GPIO_setupPortDirection+0x3e>
    1aba:	8b 81       	ldd	r24, Y+3	; 0x03
    1abc:	9c 81       	ldd	r25, Y+4	; 0x04
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	61 f0       	breq	.+24     	; 0x1ada <GPIO_setupPortDirection+0x54>
    1ac2:	1e c0       	rjmp	.+60     	; 0x1b00 <GPIO_setupPortDirection+0x7a>
    1ac4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac8:	22 30       	cpi	r18, 0x02	; 2
    1aca:	31 05       	cpc	r19, r1
    1acc:	81 f0       	breq	.+32     	; 0x1aee <GPIO_setupPortDirection+0x68>
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad2:	83 30       	cpi	r24, 0x03	; 3
    1ad4:	91 05       	cpc	r25, r1
    1ad6:	81 f0       	breq	.+32     	; 0x1af8 <GPIO_setupPortDirection+0x72>
    1ad8:	13 c0       	rjmp	.+38     	; 0x1b00 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1ada:	ea e3       	ldi	r30, 0x3A	; 58
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	80 83       	st	Z, r24
    1ae2:	0e c0       	rjmp	.+28     	; 0x1b00 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1ae4:	e7 e3       	ldi	r30, 0x37	; 55
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	80 83       	st	Z, r24
    1aec:	09 c0       	rjmp	.+18     	; 0x1b00 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1aee:	e4 e3       	ldi	r30, 0x34	; 52
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	8a 81       	ldd	r24, Y+2	; 0x02
    1af4:	80 83       	st	Z, r24
    1af6:	04 c0       	rjmp	.+8      	; 0x1b00 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1af8:	e1 e3       	ldi	r30, 0x31	; 49
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	8a 81       	ldd	r24, Y+2	; 0x02
    1afe:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	08 95       	ret

00001b0e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1b0e:	df 93       	push	r29
    1b10:	cf 93       	push	r28
    1b12:	00 d0       	rcall	.+0      	; 0x1b14 <GPIO_writePort+0x6>
    1b14:	00 d0       	rcall	.+0      	; 0x1b16 <GPIO_writePort+0x8>
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	89 83       	std	Y+1, r24	; 0x01
    1b1c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	84 30       	cpi	r24, 0x04	; 4
    1b22:	90 f5       	brcc	.+100    	; 0x1b88 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	28 2f       	mov	r18, r24
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	3c 83       	std	Y+4, r19	; 0x04
    1b2c:	2b 83       	std	Y+3, r18	; 0x03
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	9c 81       	ldd	r25, Y+4	; 0x04
    1b32:	81 30       	cpi	r24, 0x01	; 1
    1b34:	91 05       	cpc	r25, r1
    1b36:	d1 f0       	breq	.+52     	; 0x1b6c <GPIO_writePort+0x5e>
    1b38:	2b 81       	ldd	r18, Y+3	; 0x03
    1b3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b3c:	22 30       	cpi	r18, 0x02	; 2
    1b3e:	31 05       	cpc	r19, r1
    1b40:	2c f4       	brge	.+10     	; 0x1b4c <GPIO_writePort+0x3e>
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	9c 81       	ldd	r25, Y+4	; 0x04
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	61 f0       	breq	.+24     	; 0x1b62 <GPIO_writePort+0x54>
    1b4a:	1e c0       	rjmp	.+60     	; 0x1b88 <GPIO_writePort+0x7a>
    1b4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b50:	22 30       	cpi	r18, 0x02	; 2
    1b52:	31 05       	cpc	r19, r1
    1b54:	81 f0       	breq	.+32     	; 0x1b76 <GPIO_writePort+0x68>
    1b56:	8b 81       	ldd	r24, Y+3	; 0x03
    1b58:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5a:	83 30       	cpi	r24, 0x03	; 3
    1b5c:	91 05       	cpc	r25, r1
    1b5e:	81 f0       	breq	.+32     	; 0x1b80 <GPIO_writePort+0x72>
    1b60:	13 c0       	rjmp	.+38     	; 0x1b88 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1b62:	eb e3       	ldi	r30, 0x3B	; 59
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	8a 81       	ldd	r24, Y+2	; 0x02
    1b68:	80 83       	st	Z, r24
    1b6a:	0e c0       	rjmp	.+28     	; 0x1b88 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1b6c:	e8 e3       	ldi	r30, 0x38	; 56
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	80 83       	st	Z, r24
    1b74:	09 c0       	rjmp	.+18     	; 0x1b88 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1b76:	e5 e3       	ldi	r30, 0x35	; 53
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	80 83       	st	Z, r24
    1b7e:	04 c0       	rjmp	.+8      	; 0x1b88 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1b80:	e2 e3       	ldi	r30, 0x32	; 50
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	cf 91       	pop	r28
    1b92:	df 91       	pop	r29
    1b94:	08 95       	ret

00001b96 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1b96:	df 93       	push	r29
    1b98:	cf 93       	push	r28
    1b9a:	00 d0       	rcall	.+0      	; 0x1b9c <GPIO_readPort+0x6>
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <GPIO_readPort+0x8>
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1ba4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	84 30       	cpi	r24, 0x04	; 4
    1baa:	90 f5       	brcc	.+100    	; 0x1c10 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	28 2f       	mov	r18, r24
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	3c 83       	std	Y+4, r19	; 0x04
    1bb4:	2b 83       	std	Y+3, r18	; 0x03
    1bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bba:	81 30       	cpi	r24, 0x01	; 1
    1bbc:	91 05       	cpc	r25, r1
    1bbe:	d1 f0       	breq	.+52     	; 0x1bf4 <GPIO_readPort+0x5e>
    1bc0:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc2:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc4:	22 30       	cpi	r18, 0x02	; 2
    1bc6:	31 05       	cpc	r19, r1
    1bc8:	2c f4       	brge	.+10     	; 0x1bd4 <GPIO_readPort+0x3e>
    1bca:	8b 81       	ldd	r24, Y+3	; 0x03
    1bcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bce:	00 97       	sbiw	r24, 0x00	; 0
    1bd0:	61 f0       	breq	.+24     	; 0x1bea <GPIO_readPort+0x54>
    1bd2:	1e c0       	rjmp	.+60     	; 0x1c10 <GPIO_readPort+0x7a>
    1bd4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd6:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd8:	22 30       	cpi	r18, 0x02	; 2
    1bda:	31 05       	cpc	r19, r1
    1bdc:	81 f0       	breq	.+32     	; 0x1bfe <GPIO_readPort+0x68>
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	9c 81       	ldd	r25, Y+4	; 0x04
    1be2:	83 30       	cpi	r24, 0x03	; 3
    1be4:	91 05       	cpc	r25, r1
    1be6:	81 f0       	breq	.+32     	; 0x1c08 <GPIO_readPort+0x72>
    1be8:	13 c0       	rjmp	.+38     	; 0x1c10 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1bea:	e9 e3       	ldi	r30, 0x39	; 57
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	89 83       	std	Y+1, r24	; 0x01
    1bf2:	0e c0       	rjmp	.+28     	; 0x1c10 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1bf4:	e6 e3       	ldi	r30, 0x36	; 54
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	89 83       	std	Y+1, r24	; 0x01
    1bfc:	09 c0       	rjmp	.+18     	; 0x1c10 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1bfe:	e3 e3       	ldi	r30, 0x33	; 51
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	89 83       	std	Y+1, r24	; 0x01
    1c06:	04 c0       	rjmp	.+8      	; 0x1c10 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1c08:	e0 e3       	ldi	r30, 0x30	; 48
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c12:	0f 90       	pop	r0
    1c14:	0f 90       	pop	r0
    1c16:	0f 90       	pop	r0
    1c18:	0f 90       	pop	r0
    1c1a:	cf 91       	pop	r28
    1c1c:	df 91       	pop	r29
    1c1e:	08 95       	ret

00001c20 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	2e 97       	sbiw	r28, 0x0e	; 14
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	f8 94       	cli
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1c34:	83 e0       	ldi	r24, 0x03	; 3
    1c36:	60 e0       	ldi	r22, 0x00	; 0
    1c38:	41 e0       	ldi	r20, 0x01	; 1
    1c3a:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1c3e:	83 e0       	ldi	r24, 0x03	; 3
    1c40:	61 e0       	ldi	r22, 0x01	; 1
    1c42:	41 e0       	ldi	r20, 0x01	; 1
    1c44:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <GPIO_setupPinDirection>
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	a0 ea       	ldi	r26, 0xA0	; 160
    1c4e:	b1 e4       	ldi	r27, 0x41	; 65
    1c50:	8b 87       	std	Y+11, r24	; 0x0b
    1c52:	9c 87       	std	Y+12, r25	; 0x0c
    1c54:	ad 87       	std	Y+13, r26	; 0x0d
    1c56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	4a e7       	ldi	r20, 0x7A	; 122
    1c66:	55 e4       	ldi	r21, 0x45	; 69
    1c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	8f 83       	std	Y+7, r24	; 0x07
    1c72:	98 87       	std	Y+8, r25	; 0x08
    1c74:	a9 87       	std	Y+9, r26	; 0x09
    1c76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c78:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7a:	78 85       	ldd	r23, Y+8	; 0x08
    1c7c:	89 85       	ldd	r24, Y+9	; 0x09
    1c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	40 e8       	ldi	r20, 0x80	; 128
    1c86:	5f e3       	ldi	r21, 0x3F	; 63
    1c88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c8c:	88 23       	and	r24, r24
    1c8e:	2c f4       	brge	.+10     	; 0x1c9a <LCD_init+0x7a>
		__ticks = 1;
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	9e 83       	std	Y+6, r25	; 0x06
    1c96:	8d 83       	std	Y+5, r24	; 0x05
    1c98:	3f c0       	rjmp	.+126    	; 0x1d18 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1c9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c9c:	78 85       	ldd	r23, Y+8	; 0x08
    1c9e:	89 85       	ldd	r24, Y+9	; 0x09
    1ca0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	3f ef       	ldi	r19, 0xFF	; 255
    1ca6:	4f e7       	ldi	r20, 0x7F	; 127
    1ca8:	57 e4       	ldi	r21, 0x47	; 71
    1caa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cae:	18 16       	cp	r1, r24
    1cb0:	4c f5       	brge	.+82     	; 0x1d04 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	40 e2       	ldi	r20, 0x20	; 32
    1cc0:	51 e4       	ldi	r21, 0x41	; 65
    1cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	bc 01       	movw	r22, r24
    1ccc:	cd 01       	movw	r24, r26
    1cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	9e 83       	std	Y+6, r25	; 0x06
    1cd8:	8d 83       	std	Y+5, r24	; 0x05
    1cda:	0f c0       	rjmp	.+30     	; 0x1cfa <LCD_init+0xda>
    1cdc:	80 e9       	ldi	r24, 0x90	; 144
    1cde:	91 e0       	ldi	r25, 0x01	; 1
    1ce0:	9c 83       	std	Y+4, r25	; 0x04
    1ce2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	f1 f7       	brne	.-4      	; 0x1ce8 <LCD_init+0xc8>
    1cec:	9c 83       	std	Y+4, r25	; 0x04
    1cee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf4:	01 97       	sbiw	r24, 0x01	; 1
    1cf6:	9e 83       	std	Y+6, r25	; 0x06
    1cf8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfe:	00 97       	sbiw	r24, 0x00	; 0
    1d00:	69 f7       	brne	.-38     	; 0x1cdc <LCD_init+0xbc>
    1d02:	14 c0       	rjmp	.+40     	; 0x1d2c <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d04:	6f 81       	ldd	r22, Y+7	; 0x07
    1d06:	78 85       	ldd	r23, Y+8	; 0x08
    1d08:	89 85       	ldd	r24, Y+9	; 0x09
    1d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	9e 83       	std	Y+6, r25	; 0x06
    1d16:	8d 83       	std	Y+5, r24	; 0x05
    1d18:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1c:	9a 83       	std	Y+2, r25	; 0x02
    1d1e:	89 83       	std	Y+1, r24	; 0x01
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	9a 81       	ldd	r25, Y+2	; 0x02
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	f1 f7       	brne	.-4      	; 0x1d24 <LCD_init+0x104>
    1d28:	9a 83       	std	Y+2, r25	; 0x02
    1d2a:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1d2c:	82 e0       	ldi	r24, 0x02	; 2
    1d2e:	6f ef       	ldi	r22, 0xFF	; 255
    1d30:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1d34:	88 e3       	ldi	r24, 0x38	; 56
    1d36:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1d3a:	8c e0       	ldi	r24, 0x0C	; 12
    1d3c:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_sendCommand>
}
    1d46:	2e 96       	adiw	r28, 0x0e	; 14
    1d48:	0f b6       	in	r0, 0x3f	; 63
    1d4a:	f8 94       	cli
    1d4c:	de bf       	out	0x3e, r29	; 62
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	cd bf       	out	0x3d, r28	; 61
    1d52:	cf 91       	pop	r28
    1d54:	df 91       	pop	r29
    1d56:	08 95       	ret

00001d58 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1d58:	df 93       	push	r29
    1d5a:	cf 93       	push	r28
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
    1d60:	e9 97       	sbiw	r28, 0x39	; 57
    1d62:	0f b6       	in	r0, 0x3f	; 63
    1d64:	f8 94       	cli
    1d66:	de bf       	out	0x3e, r29	; 62
    1d68:	0f be       	out	0x3f, r0	; 63
    1d6a:	cd bf       	out	0x3d, r28	; 61
    1d6c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1d6e:	83 e0       	ldi	r24, 0x03	; 3
    1d70:	60 e0       	ldi	r22, 0x00	; 0
    1d72:	40 e0       	ldi	r20, 0x00	; 0
    1d74:	0e 94 bd 0b 	call	0x177a	; 0x177a <GPIO_writePin>
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	a0 e8       	ldi	r26, 0x80	; 128
    1d7e:	bf e3       	ldi	r27, 0x3F	; 63
    1d80:	8d ab       	std	Y+53, r24	; 0x35
    1d82:	9e ab       	std	Y+54, r25	; 0x36
    1d84:	af ab       	std	Y+55, r26	; 0x37
    1d86:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d88:	6d a9       	ldd	r22, Y+53	; 0x35
    1d8a:	7e a9       	ldd	r23, Y+54	; 0x36
    1d8c:	8f a9       	ldd	r24, Y+55	; 0x37
    1d8e:	98 ad       	ldd	r25, Y+56	; 0x38
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	4a e7       	ldi	r20, 0x7A	; 122
    1d96:	55 e4       	ldi	r21, 0x45	; 69
    1d98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	89 ab       	std	Y+49, r24	; 0x31
    1da2:	9a ab       	std	Y+50, r25	; 0x32
    1da4:	ab ab       	std	Y+51, r26	; 0x33
    1da6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1da8:	69 a9       	ldd	r22, Y+49	; 0x31
    1daa:	7a a9       	ldd	r23, Y+50	; 0x32
    1dac:	8b a9       	ldd	r24, Y+51	; 0x33
    1dae:	9c a9       	ldd	r25, Y+52	; 0x34
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e8       	ldi	r20, 0x80	; 128
    1db6:	5f e3       	ldi	r21, 0x3F	; 63
    1db8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dbc:	88 23       	and	r24, r24
    1dbe:	2c f4       	brge	.+10     	; 0x1dca <LCD_sendCommand+0x72>
		__ticks = 1;
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	98 ab       	std	Y+48, r25	; 0x30
    1dc6:	8f a7       	std	Y+47, r24	; 0x2f
    1dc8:	3f c0       	rjmp	.+126    	; 0x1e48 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1dca:	69 a9       	ldd	r22, Y+49	; 0x31
    1dcc:	7a a9       	ldd	r23, Y+50	; 0x32
    1dce:	8b a9       	ldd	r24, Y+51	; 0x33
    1dd0:	9c a9       	ldd	r25, Y+52	; 0x34
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	3f ef       	ldi	r19, 0xFF	; 255
    1dd6:	4f e7       	ldi	r20, 0x7F	; 127
    1dd8:	57 e4       	ldi	r21, 0x47	; 71
    1dda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dde:	18 16       	cp	r1, r24
    1de0:	4c f5       	brge	.+82     	; 0x1e34 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de2:	6d a9       	ldd	r22, Y+53	; 0x35
    1de4:	7e a9       	ldd	r23, Y+54	; 0x36
    1de6:	8f a9       	ldd	r24, Y+55	; 0x37
    1de8:	98 ad       	ldd	r25, Y+56	; 0x38
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	40 e2       	ldi	r20, 0x20	; 32
    1df0:	51 e4       	ldi	r21, 0x41	; 65
    1df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	bc 01       	movw	r22, r24
    1dfc:	cd 01       	movw	r24, r26
    1dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	98 ab       	std	Y+48, r25	; 0x30
    1e08:	8f a7       	std	Y+47, r24	; 0x2f
    1e0a:	0f c0       	rjmp	.+30     	; 0x1e2a <LCD_sendCommand+0xd2>
    1e0c:	80 e9       	ldi	r24, 0x90	; 144
    1e0e:	91 e0       	ldi	r25, 0x01	; 1
    1e10:	9e a7       	std	Y+46, r25	; 0x2e
    1e12:	8d a7       	std	Y+45, r24	; 0x2d
    1e14:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e16:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	f1 f7       	brne	.-4      	; 0x1e18 <LCD_sendCommand+0xc0>
    1e1c:	9e a7       	std	Y+46, r25	; 0x2e
    1e1e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e20:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e22:	98 a9       	ldd	r25, Y+48	; 0x30
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	98 ab       	std	Y+48, r25	; 0x30
    1e28:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e2c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e2e:	00 97       	sbiw	r24, 0x00	; 0
    1e30:	69 f7       	brne	.-38     	; 0x1e0c <LCD_sendCommand+0xb4>
    1e32:	14 c0       	rjmp	.+40     	; 0x1e5c <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e34:	69 a9       	ldd	r22, Y+49	; 0x31
    1e36:	7a a9       	ldd	r23, Y+50	; 0x32
    1e38:	8b a9       	ldd	r24, Y+51	; 0x33
    1e3a:	9c a9       	ldd	r25, Y+52	; 0x34
    1e3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	98 ab       	std	Y+48, r25	; 0x30
    1e46:	8f a7       	std	Y+47, r24	; 0x2f
    1e48:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e4a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e4c:	9c a7       	std	Y+44, r25	; 0x2c
    1e4e:	8b a7       	std	Y+43, r24	; 0x2b
    1e50:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e52:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	f1 f7       	brne	.-4      	; 0x1e54 <LCD_sendCommand+0xfc>
    1e58:	9c a7       	std	Y+44, r25	; 0x2c
    1e5a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1e5c:	83 e0       	ldi	r24, 0x03	; 3
    1e5e:	61 e0       	ldi	r22, 0x01	; 1
    1e60:	41 e0       	ldi	r20, 0x01	; 1
    1e62:	0e 94 bd 0b 	call	0x177a	; 0x177a <GPIO_writePin>
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	a0 e8       	ldi	r26, 0x80	; 128
    1e6c:	bf e3       	ldi	r27, 0x3F	; 63
    1e6e:	8f a3       	std	Y+39, r24	; 0x27
    1e70:	98 a7       	std	Y+40, r25	; 0x28
    1e72:	a9 a7       	std	Y+41, r26	; 0x29
    1e74:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e76:	6f a1       	ldd	r22, Y+39	; 0x27
    1e78:	78 a5       	ldd	r23, Y+40	; 0x28
    1e7a:	89 a5       	ldd	r24, Y+41	; 0x29
    1e7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	4a e7       	ldi	r20, 0x7A	; 122
    1e84:	55 e4       	ldi	r21, 0x45	; 69
    1e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	8b a3       	std	Y+35, r24	; 0x23
    1e90:	9c a3       	std	Y+36, r25	; 0x24
    1e92:	ad a3       	std	Y+37, r26	; 0x25
    1e94:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e96:	6b a1       	ldd	r22, Y+35	; 0x23
    1e98:	7c a1       	ldd	r23, Y+36	; 0x24
    1e9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 e8       	ldi	r20, 0x80	; 128
    1ea4:	5f e3       	ldi	r21, 0x3F	; 63
    1ea6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eaa:	88 23       	and	r24, r24
    1eac:	2c f4       	brge	.+10     	; 0x1eb8 <LCD_sendCommand+0x160>
		__ticks = 1;
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	9a a3       	std	Y+34, r25	; 0x22
    1eb4:	89 a3       	std	Y+33, r24	; 0x21
    1eb6:	3f c0       	rjmp	.+126    	; 0x1f36 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1eb8:	6b a1       	ldd	r22, Y+35	; 0x23
    1eba:	7c a1       	ldd	r23, Y+36	; 0x24
    1ebc:	8d a1       	ldd	r24, Y+37	; 0x25
    1ebe:	9e a1       	ldd	r25, Y+38	; 0x26
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	3f ef       	ldi	r19, 0xFF	; 255
    1ec4:	4f e7       	ldi	r20, 0x7F	; 127
    1ec6:	57 e4       	ldi	r21, 0x47	; 71
    1ec8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ecc:	18 16       	cp	r1, r24
    1ece:	4c f5       	brge	.+82     	; 0x1f22 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ed2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ed4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ed6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	40 e2       	ldi	r20, 0x20	; 32
    1ede:	51 e4       	ldi	r21, 0x41	; 65
    1ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	bc 01       	movw	r22, r24
    1eea:	cd 01       	movw	r24, r26
    1eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	9a a3       	std	Y+34, r25	; 0x22
    1ef6:	89 a3       	std	Y+33, r24	; 0x21
    1ef8:	0f c0       	rjmp	.+30     	; 0x1f18 <LCD_sendCommand+0x1c0>
    1efa:	80 e9       	ldi	r24, 0x90	; 144
    1efc:	91 e0       	ldi	r25, 0x01	; 1
    1efe:	98 a3       	std	Y+32, r25	; 0x20
    1f00:	8f 8f       	std	Y+31, r24	; 0x1f
    1f02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f04:	98 a1       	ldd	r25, Y+32	; 0x20
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	f1 f7       	brne	.-4      	; 0x1f06 <LCD_sendCommand+0x1ae>
    1f0a:	98 a3       	std	Y+32, r25	; 0x20
    1f0c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f10:	9a a1       	ldd	r25, Y+34	; 0x22
    1f12:	01 97       	sbiw	r24, 0x01	; 1
    1f14:	9a a3       	std	Y+34, r25	; 0x22
    1f16:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f18:	89 a1       	ldd	r24, Y+33	; 0x21
    1f1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f1c:	00 97       	sbiw	r24, 0x00	; 0
    1f1e:	69 f7       	brne	.-38     	; 0x1efa <LCD_sendCommand+0x1a2>
    1f20:	14 c0       	rjmp	.+40     	; 0x1f4a <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f22:	6b a1       	ldd	r22, Y+35	; 0x23
    1f24:	7c a1       	ldd	r23, Y+36	; 0x24
    1f26:	8d a1       	ldd	r24, Y+37	; 0x25
    1f28:	9e a1       	ldd	r25, Y+38	; 0x26
    1f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	9a a3       	std	Y+34, r25	; 0x22
    1f34:	89 a3       	std	Y+33, r24	; 0x21
    1f36:	89 a1       	ldd	r24, Y+33	; 0x21
    1f38:	9a a1       	ldd	r25, Y+34	; 0x22
    1f3a:	9e 8f       	std	Y+30, r25	; 0x1e
    1f3c:	8d 8f       	std	Y+29, r24	; 0x1d
    1f3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	f1 f7       	brne	.-4      	; 0x1f42 <LCD_sendCommand+0x1ea>
    1f46:	9e 8f       	std	Y+30, r25	; 0x1e
    1f48:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1f4a:	82 e0       	ldi	r24, 0x02	; 2
    1f4c:	69 ad       	ldd	r22, Y+57	; 0x39
    1f4e:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <GPIO_writePort>
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	a0 e8       	ldi	r26, 0x80	; 128
    1f58:	bf e3       	ldi	r27, 0x3F	; 63
    1f5a:	89 8f       	std	Y+25, r24	; 0x19
    1f5c:	9a 8f       	std	Y+26, r25	; 0x1a
    1f5e:	ab 8f       	std	Y+27, r26	; 0x1b
    1f60:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f62:	69 8d       	ldd	r22, Y+25	; 0x19
    1f64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	4a e7       	ldi	r20, 0x7A	; 122
    1f70:	55 e4       	ldi	r21, 0x45	; 69
    1f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	8d 8b       	std	Y+21, r24	; 0x15
    1f7c:	9e 8b       	std	Y+22, r25	; 0x16
    1f7e:	af 8b       	std	Y+23, r26	; 0x17
    1f80:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f82:	6d 89       	ldd	r22, Y+21	; 0x15
    1f84:	7e 89       	ldd	r23, Y+22	; 0x16
    1f86:	8f 89       	ldd	r24, Y+23	; 0x17
    1f88:	98 8d       	ldd	r25, Y+24	; 0x18
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	40 e8       	ldi	r20, 0x80	; 128
    1f90:	5f e3       	ldi	r21, 0x3F	; 63
    1f92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f96:	88 23       	and	r24, r24
    1f98:	2c f4       	brge	.+10     	; 0x1fa4 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	9c 8b       	std	Y+20, r25	; 0x14
    1fa0:	8b 8b       	std	Y+19, r24	; 0x13
    1fa2:	3f c0       	rjmp	.+126    	; 0x2022 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1fa4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa8:	8f 89       	ldd	r24, Y+23	; 0x17
    1faa:	98 8d       	ldd	r25, Y+24	; 0x18
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	3f ef       	ldi	r19, 0xFF	; 255
    1fb0:	4f e7       	ldi	r20, 0x7F	; 127
    1fb2:	57 e4       	ldi	r21, 0x47	; 71
    1fb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fb8:	18 16       	cp	r1, r24
    1fba:	4c f5       	brge	.+82     	; 0x200e <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fbc:	69 8d       	ldd	r22, Y+25	; 0x19
    1fbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	40 e2       	ldi	r20, 0x20	; 32
    1fca:	51 e4       	ldi	r21, 0x41	; 65
    1fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	bc 01       	movw	r22, r24
    1fd6:	cd 01       	movw	r24, r26
    1fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	9c 8b       	std	Y+20, r25	; 0x14
    1fe2:	8b 8b       	std	Y+19, r24	; 0x13
    1fe4:	0f c0       	rjmp	.+30     	; 0x2004 <LCD_sendCommand+0x2ac>
    1fe6:	80 e9       	ldi	r24, 0x90	; 144
    1fe8:	91 e0       	ldi	r25, 0x01	; 1
    1fea:	9a 8b       	std	Y+18, r25	; 0x12
    1fec:	89 8b       	std	Y+17, r24	; 0x11
    1fee:	89 89       	ldd	r24, Y+17	; 0x11
    1ff0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ff2:	01 97       	sbiw	r24, 0x01	; 1
    1ff4:	f1 f7       	brne	.-4      	; 0x1ff2 <LCD_sendCommand+0x29a>
    1ff6:	9a 8b       	std	Y+18, r25	; 0x12
    1ff8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffa:	8b 89       	ldd	r24, Y+19	; 0x13
    1ffc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ffe:	01 97       	sbiw	r24, 0x01	; 1
    2000:	9c 8b       	std	Y+20, r25	; 0x14
    2002:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2004:	8b 89       	ldd	r24, Y+19	; 0x13
    2006:	9c 89       	ldd	r25, Y+20	; 0x14
    2008:	00 97       	sbiw	r24, 0x00	; 0
    200a:	69 f7       	brne	.-38     	; 0x1fe6 <LCD_sendCommand+0x28e>
    200c:	14 c0       	rjmp	.+40     	; 0x2036 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    200e:	6d 89       	ldd	r22, Y+21	; 0x15
    2010:	7e 89       	ldd	r23, Y+22	; 0x16
    2012:	8f 89       	ldd	r24, Y+23	; 0x17
    2014:	98 8d       	ldd	r25, Y+24	; 0x18
    2016:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	9c 8b       	std	Y+20, r25	; 0x14
    2020:	8b 8b       	std	Y+19, r24	; 0x13
    2022:	8b 89       	ldd	r24, Y+19	; 0x13
    2024:	9c 89       	ldd	r25, Y+20	; 0x14
    2026:	98 8b       	std	Y+16, r25	; 0x10
    2028:	8f 87       	std	Y+15, r24	; 0x0f
    202a:	8f 85       	ldd	r24, Y+15	; 0x0f
    202c:	98 89       	ldd	r25, Y+16	; 0x10
    202e:	01 97       	sbiw	r24, 0x01	; 1
    2030:	f1 f7       	brne	.-4      	; 0x202e <LCD_sendCommand+0x2d6>
    2032:	98 8b       	std	Y+16, r25	; 0x10
    2034:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2036:	83 e0       	ldi	r24, 0x03	; 3
    2038:	61 e0       	ldi	r22, 0x01	; 1
    203a:	40 e0       	ldi	r20, 0x00	; 0
    203c:	0e 94 bd 0b 	call	0x177a	; 0x177a <GPIO_writePin>
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	a0 e8       	ldi	r26, 0x80	; 128
    2046:	bf e3       	ldi	r27, 0x3F	; 63
    2048:	8b 87       	std	Y+11, r24	; 0x0b
    204a:	9c 87       	std	Y+12, r25	; 0x0c
    204c:	ad 87       	std	Y+13, r26	; 0x0d
    204e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2050:	6b 85       	ldd	r22, Y+11	; 0x0b
    2052:	7c 85       	ldd	r23, Y+12	; 0x0c
    2054:	8d 85       	ldd	r24, Y+13	; 0x0d
    2056:	9e 85       	ldd	r25, Y+14	; 0x0e
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	4a e7       	ldi	r20, 0x7A	; 122
    205e:	55 e4       	ldi	r21, 0x45	; 69
    2060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	8f 83       	std	Y+7, r24	; 0x07
    206a:	98 87       	std	Y+8, r25	; 0x08
    206c:	a9 87       	std	Y+9, r26	; 0x09
    206e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2070:	6f 81       	ldd	r22, Y+7	; 0x07
    2072:	78 85       	ldd	r23, Y+8	; 0x08
    2074:	89 85       	ldd	r24, Y+9	; 0x09
    2076:	9a 85       	ldd	r25, Y+10	; 0x0a
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	40 e8       	ldi	r20, 0x80	; 128
    207e:	5f e3       	ldi	r21, 0x3F	; 63
    2080:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2084:	88 23       	and	r24, r24
    2086:	2c f4       	brge	.+10     	; 0x2092 <LCD_sendCommand+0x33a>
		__ticks = 1;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	9e 83       	std	Y+6, r25	; 0x06
    208e:	8d 83       	std	Y+5, r24	; 0x05
    2090:	3f c0       	rjmp	.+126    	; 0x2110 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2092:	6f 81       	ldd	r22, Y+7	; 0x07
    2094:	78 85       	ldd	r23, Y+8	; 0x08
    2096:	89 85       	ldd	r24, Y+9	; 0x09
    2098:	9a 85       	ldd	r25, Y+10	; 0x0a
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	3f ef       	ldi	r19, 0xFF	; 255
    209e:	4f e7       	ldi	r20, 0x7F	; 127
    20a0:	57 e4       	ldi	r21, 0x47	; 71
    20a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20a6:	18 16       	cp	r1, r24
    20a8:	4c f5       	brge	.+82     	; 0x20fc <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e2       	ldi	r20, 0x20	; 32
    20b8:	51 e4       	ldi	r21, 0x41	; 65
    20ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	bc 01       	movw	r22, r24
    20c4:	cd 01       	movw	r24, r26
    20c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	9e 83       	std	Y+6, r25	; 0x06
    20d0:	8d 83       	std	Y+5, r24	; 0x05
    20d2:	0f c0       	rjmp	.+30     	; 0x20f2 <LCD_sendCommand+0x39a>
    20d4:	80 e9       	ldi	r24, 0x90	; 144
    20d6:	91 e0       	ldi	r25, 0x01	; 1
    20d8:	9c 83       	std	Y+4, r25	; 0x04
    20da:	8b 83       	std	Y+3, r24	; 0x03
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	9c 81       	ldd	r25, Y+4	; 0x04
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	f1 f7       	brne	.-4      	; 0x20e0 <LCD_sendCommand+0x388>
    20e4:	9c 83       	std	Y+4, r25	; 0x04
    20e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ea:	9e 81       	ldd	r25, Y+6	; 0x06
    20ec:	01 97       	sbiw	r24, 0x01	; 1
    20ee:	9e 83       	std	Y+6, r25	; 0x06
    20f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f2:	8d 81       	ldd	r24, Y+5	; 0x05
    20f4:	9e 81       	ldd	r25, Y+6	; 0x06
    20f6:	00 97       	sbiw	r24, 0x00	; 0
    20f8:	69 f7       	brne	.-38     	; 0x20d4 <LCD_sendCommand+0x37c>
    20fa:	14 c0       	rjmp	.+40     	; 0x2124 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fc:	6f 81       	ldd	r22, Y+7	; 0x07
    20fe:	78 85       	ldd	r23, Y+8	; 0x08
    2100:	89 85       	ldd	r24, Y+9	; 0x09
    2102:	9a 85       	ldd	r25, Y+10	; 0x0a
    2104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	9e 83       	std	Y+6, r25	; 0x06
    210e:	8d 83       	std	Y+5, r24	; 0x05
    2110:	8d 81       	ldd	r24, Y+5	; 0x05
    2112:	9e 81       	ldd	r25, Y+6	; 0x06
    2114:	9a 83       	std	Y+2, r25	; 0x02
    2116:	89 83       	std	Y+1, r24	; 0x01
    2118:	89 81       	ldd	r24, Y+1	; 0x01
    211a:	9a 81       	ldd	r25, Y+2	; 0x02
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	f1 f7       	brne	.-4      	; 0x211c <LCD_sendCommand+0x3c4>
    2120:	9a 83       	std	Y+2, r25	; 0x02
    2122:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2124:	e9 96       	adiw	r28, 0x39	; 57
    2126:	0f b6       	in	r0, 0x3f	; 63
    2128:	f8 94       	cli
    212a:	de bf       	out	0x3e, r29	; 62
    212c:	0f be       	out	0x3f, r0	; 63
    212e:	cd bf       	out	0x3d, r28	; 61
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	08 95       	ret

00002136 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	e9 97       	sbiw	r28, 0x39	; 57
    2140:	0f b6       	in	r0, 0x3f	; 63
    2142:	f8 94       	cli
    2144:	de bf       	out	0x3e, r29	; 62
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	cd bf       	out	0x3d, r28	; 61
    214a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    214c:	83 e0       	ldi	r24, 0x03	; 3
    214e:	60 e0       	ldi	r22, 0x00	; 0
    2150:	41 e0       	ldi	r20, 0x01	; 1
    2152:	0e 94 bd 0b 	call	0x177a	; 0x177a <GPIO_writePin>
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	a0 e8       	ldi	r26, 0x80	; 128
    215c:	bf e3       	ldi	r27, 0x3F	; 63
    215e:	8d ab       	std	Y+53, r24	; 0x35
    2160:	9e ab       	std	Y+54, r25	; 0x36
    2162:	af ab       	std	Y+55, r26	; 0x37
    2164:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2166:	6d a9       	ldd	r22, Y+53	; 0x35
    2168:	7e a9       	ldd	r23, Y+54	; 0x36
    216a:	8f a9       	ldd	r24, Y+55	; 0x37
    216c:	98 ad       	ldd	r25, Y+56	; 0x38
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	4a e7       	ldi	r20, 0x7A	; 122
    2174:	55 e4       	ldi	r21, 0x45	; 69
    2176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	89 ab       	std	Y+49, r24	; 0x31
    2180:	9a ab       	std	Y+50, r25	; 0x32
    2182:	ab ab       	std	Y+51, r26	; 0x33
    2184:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2186:	69 a9       	ldd	r22, Y+49	; 0x31
    2188:	7a a9       	ldd	r23, Y+50	; 0x32
    218a:	8b a9       	ldd	r24, Y+51	; 0x33
    218c:	9c a9       	ldd	r25, Y+52	; 0x34
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	40 e8       	ldi	r20, 0x80	; 128
    2194:	5f e3       	ldi	r21, 0x3F	; 63
    2196:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    219a:	88 23       	and	r24, r24
    219c:	2c f4       	brge	.+10     	; 0x21a8 <LCD_displayCharacter+0x72>
		__ticks = 1;
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	98 ab       	std	Y+48, r25	; 0x30
    21a4:	8f a7       	std	Y+47, r24	; 0x2f
    21a6:	3f c0       	rjmp	.+126    	; 0x2226 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    21a8:	69 a9       	ldd	r22, Y+49	; 0x31
    21aa:	7a a9       	ldd	r23, Y+50	; 0x32
    21ac:	8b a9       	ldd	r24, Y+51	; 0x33
    21ae:	9c a9       	ldd	r25, Y+52	; 0x34
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	3f ef       	ldi	r19, 0xFF	; 255
    21b4:	4f e7       	ldi	r20, 0x7F	; 127
    21b6:	57 e4       	ldi	r21, 0x47	; 71
    21b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21bc:	18 16       	cp	r1, r24
    21be:	4c f5       	brge	.+82     	; 0x2212 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c0:	6d a9       	ldd	r22, Y+53	; 0x35
    21c2:	7e a9       	ldd	r23, Y+54	; 0x36
    21c4:	8f a9       	ldd	r24, Y+55	; 0x37
    21c6:	98 ad       	ldd	r25, Y+56	; 0x38
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	40 e2       	ldi	r20, 0x20	; 32
    21ce:	51 e4       	ldi	r21, 0x41	; 65
    21d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	bc 01       	movw	r22, r24
    21da:	cd 01       	movw	r24, r26
    21dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	98 ab       	std	Y+48, r25	; 0x30
    21e6:	8f a7       	std	Y+47, r24	; 0x2f
    21e8:	0f c0       	rjmp	.+30     	; 0x2208 <LCD_displayCharacter+0xd2>
    21ea:	80 e9       	ldi	r24, 0x90	; 144
    21ec:	91 e0       	ldi	r25, 0x01	; 1
    21ee:	9e a7       	std	Y+46, r25	; 0x2e
    21f0:	8d a7       	std	Y+45, r24	; 0x2d
    21f2:	8d a5       	ldd	r24, Y+45	; 0x2d
    21f4:	9e a5       	ldd	r25, Y+46	; 0x2e
    21f6:	01 97       	sbiw	r24, 0x01	; 1
    21f8:	f1 f7       	brne	.-4      	; 0x21f6 <LCD_displayCharacter+0xc0>
    21fa:	9e a7       	std	Y+46, r25	; 0x2e
    21fc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2200:	98 a9       	ldd	r25, Y+48	; 0x30
    2202:	01 97       	sbiw	r24, 0x01	; 1
    2204:	98 ab       	std	Y+48, r25	; 0x30
    2206:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2208:	8f a5       	ldd	r24, Y+47	; 0x2f
    220a:	98 a9       	ldd	r25, Y+48	; 0x30
    220c:	00 97       	sbiw	r24, 0x00	; 0
    220e:	69 f7       	brne	.-38     	; 0x21ea <LCD_displayCharacter+0xb4>
    2210:	14 c0       	rjmp	.+40     	; 0x223a <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2212:	69 a9       	ldd	r22, Y+49	; 0x31
    2214:	7a a9       	ldd	r23, Y+50	; 0x32
    2216:	8b a9       	ldd	r24, Y+51	; 0x33
    2218:	9c a9       	ldd	r25, Y+52	; 0x34
    221a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	98 ab       	std	Y+48, r25	; 0x30
    2224:	8f a7       	std	Y+47, r24	; 0x2f
    2226:	8f a5       	ldd	r24, Y+47	; 0x2f
    2228:	98 a9       	ldd	r25, Y+48	; 0x30
    222a:	9c a7       	std	Y+44, r25	; 0x2c
    222c:	8b a7       	std	Y+43, r24	; 0x2b
    222e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2230:	9c a5       	ldd	r25, Y+44	; 0x2c
    2232:	01 97       	sbiw	r24, 0x01	; 1
    2234:	f1 f7       	brne	.-4      	; 0x2232 <LCD_displayCharacter+0xfc>
    2236:	9c a7       	std	Y+44, r25	; 0x2c
    2238:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    223a:	83 e0       	ldi	r24, 0x03	; 3
    223c:	61 e0       	ldi	r22, 0x01	; 1
    223e:	41 e0       	ldi	r20, 0x01	; 1
    2240:	0e 94 bd 0b 	call	0x177a	; 0x177a <GPIO_writePin>
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	a0 e8       	ldi	r26, 0x80	; 128
    224a:	bf e3       	ldi	r27, 0x3F	; 63
    224c:	8f a3       	std	Y+39, r24	; 0x27
    224e:	98 a7       	std	Y+40, r25	; 0x28
    2250:	a9 a7       	std	Y+41, r26	; 0x29
    2252:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2254:	6f a1       	ldd	r22, Y+39	; 0x27
    2256:	78 a5       	ldd	r23, Y+40	; 0x28
    2258:	89 a5       	ldd	r24, Y+41	; 0x29
    225a:	9a a5       	ldd	r25, Y+42	; 0x2a
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	4a e7       	ldi	r20, 0x7A	; 122
    2262:	55 e4       	ldi	r21, 0x45	; 69
    2264:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	8b a3       	std	Y+35, r24	; 0x23
    226e:	9c a3       	std	Y+36, r25	; 0x24
    2270:	ad a3       	std	Y+37, r26	; 0x25
    2272:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2274:	6b a1       	ldd	r22, Y+35	; 0x23
    2276:	7c a1       	ldd	r23, Y+36	; 0x24
    2278:	8d a1       	ldd	r24, Y+37	; 0x25
    227a:	9e a1       	ldd	r25, Y+38	; 0x26
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	40 e8       	ldi	r20, 0x80	; 128
    2282:	5f e3       	ldi	r21, 0x3F	; 63
    2284:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2288:	88 23       	and	r24, r24
    228a:	2c f4       	brge	.+10     	; 0x2296 <LCD_displayCharacter+0x160>
		__ticks = 1;
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	9a a3       	std	Y+34, r25	; 0x22
    2292:	89 a3       	std	Y+33, r24	; 0x21
    2294:	3f c0       	rjmp	.+126    	; 0x2314 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2296:	6b a1       	ldd	r22, Y+35	; 0x23
    2298:	7c a1       	ldd	r23, Y+36	; 0x24
    229a:	8d a1       	ldd	r24, Y+37	; 0x25
    229c:	9e a1       	ldd	r25, Y+38	; 0x26
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	3f ef       	ldi	r19, 0xFF	; 255
    22a2:	4f e7       	ldi	r20, 0x7F	; 127
    22a4:	57 e4       	ldi	r21, 0x47	; 71
    22a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22aa:	18 16       	cp	r1, r24
    22ac:	4c f5       	brge	.+82     	; 0x2300 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ae:	6f a1       	ldd	r22, Y+39	; 0x27
    22b0:	78 a5       	ldd	r23, Y+40	; 0x28
    22b2:	89 a5       	ldd	r24, Y+41	; 0x29
    22b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	40 e2       	ldi	r20, 0x20	; 32
    22bc:	51 e4       	ldi	r21, 0x41	; 65
    22be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	bc 01       	movw	r22, r24
    22c8:	cd 01       	movw	r24, r26
    22ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	9a a3       	std	Y+34, r25	; 0x22
    22d4:	89 a3       	std	Y+33, r24	; 0x21
    22d6:	0f c0       	rjmp	.+30     	; 0x22f6 <LCD_displayCharacter+0x1c0>
    22d8:	80 e9       	ldi	r24, 0x90	; 144
    22da:	91 e0       	ldi	r25, 0x01	; 1
    22dc:	98 a3       	std	Y+32, r25	; 0x20
    22de:	8f 8f       	std	Y+31, r24	; 0x1f
    22e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22e2:	98 a1       	ldd	r25, Y+32	; 0x20
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	f1 f7       	brne	.-4      	; 0x22e4 <LCD_displayCharacter+0x1ae>
    22e8:	98 a3       	std	Y+32, r25	; 0x20
    22ea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ec:	89 a1       	ldd	r24, Y+33	; 0x21
    22ee:	9a a1       	ldd	r25, Y+34	; 0x22
    22f0:	01 97       	sbiw	r24, 0x01	; 1
    22f2:	9a a3       	std	Y+34, r25	; 0x22
    22f4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f6:	89 a1       	ldd	r24, Y+33	; 0x21
    22f8:	9a a1       	ldd	r25, Y+34	; 0x22
    22fa:	00 97       	sbiw	r24, 0x00	; 0
    22fc:	69 f7       	brne	.-38     	; 0x22d8 <LCD_displayCharacter+0x1a2>
    22fe:	14 c0       	rjmp	.+40     	; 0x2328 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2300:	6b a1       	ldd	r22, Y+35	; 0x23
    2302:	7c a1       	ldd	r23, Y+36	; 0x24
    2304:	8d a1       	ldd	r24, Y+37	; 0x25
    2306:	9e a1       	ldd	r25, Y+38	; 0x26
    2308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	9a a3       	std	Y+34, r25	; 0x22
    2312:	89 a3       	std	Y+33, r24	; 0x21
    2314:	89 a1       	ldd	r24, Y+33	; 0x21
    2316:	9a a1       	ldd	r25, Y+34	; 0x22
    2318:	9e 8f       	std	Y+30, r25	; 0x1e
    231a:	8d 8f       	std	Y+29, r24	; 0x1d
    231c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    231e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	f1 f7       	brne	.-4      	; 0x2320 <LCD_displayCharacter+0x1ea>
    2324:	9e 8f       	std	Y+30, r25	; 0x1e
    2326:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2328:	82 e0       	ldi	r24, 0x02	; 2
    232a:	69 ad       	ldd	r22, Y+57	; 0x39
    232c:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <GPIO_writePort>
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	a0 e8       	ldi	r26, 0x80	; 128
    2336:	bf e3       	ldi	r27, 0x3F	; 63
    2338:	89 8f       	std	Y+25, r24	; 0x19
    233a:	9a 8f       	std	Y+26, r25	; 0x1a
    233c:	ab 8f       	std	Y+27, r26	; 0x1b
    233e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2340:	69 8d       	ldd	r22, Y+25	; 0x19
    2342:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2344:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2346:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	4a e7       	ldi	r20, 0x7A	; 122
    234e:	55 e4       	ldi	r21, 0x45	; 69
    2350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	8d 8b       	std	Y+21, r24	; 0x15
    235a:	9e 8b       	std	Y+22, r25	; 0x16
    235c:	af 8b       	std	Y+23, r26	; 0x17
    235e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2360:	6d 89       	ldd	r22, Y+21	; 0x15
    2362:	7e 89       	ldd	r23, Y+22	; 0x16
    2364:	8f 89       	ldd	r24, Y+23	; 0x17
    2366:	98 8d       	ldd	r25, Y+24	; 0x18
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	40 e8       	ldi	r20, 0x80	; 128
    236e:	5f e3       	ldi	r21, 0x3F	; 63
    2370:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2374:	88 23       	and	r24, r24
    2376:	2c f4       	brge	.+10     	; 0x2382 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	9c 8b       	std	Y+20, r25	; 0x14
    237e:	8b 8b       	std	Y+19, r24	; 0x13
    2380:	3f c0       	rjmp	.+126    	; 0x2400 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2382:	6d 89       	ldd	r22, Y+21	; 0x15
    2384:	7e 89       	ldd	r23, Y+22	; 0x16
    2386:	8f 89       	ldd	r24, Y+23	; 0x17
    2388:	98 8d       	ldd	r25, Y+24	; 0x18
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	3f ef       	ldi	r19, 0xFF	; 255
    238e:	4f e7       	ldi	r20, 0x7F	; 127
    2390:	57 e4       	ldi	r21, 0x47	; 71
    2392:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2396:	18 16       	cp	r1, r24
    2398:	4c f5       	brge	.+82     	; 0x23ec <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    239a:	69 8d       	ldd	r22, Y+25	; 0x19
    239c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    239e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	40 e2       	ldi	r20, 0x20	; 32
    23a8:	51 e4       	ldi	r21, 0x41	; 65
    23aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	bc 01       	movw	r22, r24
    23b4:	cd 01       	movw	r24, r26
    23b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	9c 8b       	std	Y+20, r25	; 0x14
    23c0:	8b 8b       	std	Y+19, r24	; 0x13
    23c2:	0f c0       	rjmp	.+30     	; 0x23e2 <LCD_displayCharacter+0x2ac>
    23c4:	80 e9       	ldi	r24, 0x90	; 144
    23c6:	91 e0       	ldi	r25, 0x01	; 1
    23c8:	9a 8b       	std	Y+18, r25	; 0x12
    23ca:	89 8b       	std	Y+17, r24	; 0x11
    23cc:	89 89       	ldd	r24, Y+17	; 0x11
    23ce:	9a 89       	ldd	r25, Y+18	; 0x12
    23d0:	01 97       	sbiw	r24, 0x01	; 1
    23d2:	f1 f7       	brne	.-4      	; 0x23d0 <LCD_displayCharacter+0x29a>
    23d4:	9a 8b       	std	Y+18, r25	; 0x12
    23d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d8:	8b 89       	ldd	r24, Y+19	; 0x13
    23da:	9c 89       	ldd	r25, Y+20	; 0x14
    23dc:	01 97       	sbiw	r24, 0x01	; 1
    23de:	9c 8b       	std	Y+20, r25	; 0x14
    23e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e2:	8b 89       	ldd	r24, Y+19	; 0x13
    23e4:	9c 89       	ldd	r25, Y+20	; 0x14
    23e6:	00 97       	sbiw	r24, 0x00	; 0
    23e8:	69 f7       	brne	.-38     	; 0x23c4 <LCD_displayCharacter+0x28e>
    23ea:	14 c0       	rjmp	.+40     	; 0x2414 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ec:	6d 89       	ldd	r22, Y+21	; 0x15
    23ee:	7e 89       	ldd	r23, Y+22	; 0x16
    23f0:	8f 89       	ldd	r24, Y+23	; 0x17
    23f2:	98 8d       	ldd	r25, Y+24	; 0x18
    23f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	9c 8b       	std	Y+20, r25	; 0x14
    23fe:	8b 8b       	std	Y+19, r24	; 0x13
    2400:	8b 89       	ldd	r24, Y+19	; 0x13
    2402:	9c 89       	ldd	r25, Y+20	; 0x14
    2404:	98 8b       	std	Y+16, r25	; 0x10
    2406:	8f 87       	std	Y+15, r24	; 0x0f
    2408:	8f 85       	ldd	r24, Y+15	; 0x0f
    240a:	98 89       	ldd	r25, Y+16	; 0x10
    240c:	01 97       	sbiw	r24, 0x01	; 1
    240e:	f1 f7       	brne	.-4      	; 0x240c <LCD_displayCharacter+0x2d6>
    2410:	98 8b       	std	Y+16, r25	; 0x10
    2412:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2414:	83 e0       	ldi	r24, 0x03	; 3
    2416:	61 e0       	ldi	r22, 0x01	; 1
    2418:	40 e0       	ldi	r20, 0x00	; 0
    241a:	0e 94 bd 0b 	call	0x177a	; 0x177a <GPIO_writePin>
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	a0 e8       	ldi	r26, 0x80	; 128
    2424:	bf e3       	ldi	r27, 0x3F	; 63
    2426:	8b 87       	std	Y+11, r24	; 0x0b
    2428:	9c 87       	std	Y+12, r25	; 0x0c
    242a:	ad 87       	std	Y+13, r26	; 0x0d
    242c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    242e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2430:	7c 85       	ldd	r23, Y+12	; 0x0c
    2432:	8d 85       	ldd	r24, Y+13	; 0x0d
    2434:	9e 85       	ldd	r25, Y+14	; 0x0e
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	4a e7       	ldi	r20, 0x7A	; 122
    243c:	55 e4       	ldi	r21, 0x45	; 69
    243e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	8f 83       	std	Y+7, r24	; 0x07
    2448:	98 87       	std	Y+8, r25	; 0x08
    244a:	a9 87       	std	Y+9, r26	; 0x09
    244c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    244e:	6f 81       	ldd	r22, Y+7	; 0x07
    2450:	78 85       	ldd	r23, Y+8	; 0x08
    2452:	89 85       	ldd	r24, Y+9	; 0x09
    2454:	9a 85       	ldd	r25, Y+10	; 0x0a
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	40 e8       	ldi	r20, 0x80	; 128
    245c:	5f e3       	ldi	r21, 0x3F	; 63
    245e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2462:	88 23       	and	r24, r24
    2464:	2c f4       	brge	.+10     	; 0x2470 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	9e 83       	std	Y+6, r25	; 0x06
    246c:	8d 83       	std	Y+5, r24	; 0x05
    246e:	3f c0       	rjmp	.+126    	; 0x24ee <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2470:	6f 81       	ldd	r22, Y+7	; 0x07
    2472:	78 85       	ldd	r23, Y+8	; 0x08
    2474:	89 85       	ldd	r24, Y+9	; 0x09
    2476:	9a 85       	ldd	r25, Y+10	; 0x0a
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	3f ef       	ldi	r19, 0xFF	; 255
    247c:	4f e7       	ldi	r20, 0x7F	; 127
    247e:	57 e4       	ldi	r21, 0x47	; 71
    2480:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2484:	18 16       	cp	r1, r24
    2486:	4c f5       	brge	.+82     	; 0x24da <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2488:	6b 85       	ldd	r22, Y+11	; 0x0b
    248a:	7c 85       	ldd	r23, Y+12	; 0x0c
    248c:	8d 85       	ldd	r24, Y+13	; 0x0d
    248e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	40 e2       	ldi	r20, 0x20	; 32
    2496:	51 e4       	ldi	r21, 0x41	; 65
    2498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	bc 01       	movw	r22, r24
    24a2:	cd 01       	movw	r24, r26
    24a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	9e 83       	std	Y+6, r25	; 0x06
    24ae:	8d 83       	std	Y+5, r24	; 0x05
    24b0:	0f c0       	rjmp	.+30     	; 0x24d0 <LCD_displayCharacter+0x39a>
    24b2:	80 e9       	ldi	r24, 0x90	; 144
    24b4:	91 e0       	ldi	r25, 0x01	; 1
    24b6:	9c 83       	std	Y+4, r25	; 0x04
    24b8:	8b 83       	std	Y+3, r24	; 0x03
    24ba:	8b 81       	ldd	r24, Y+3	; 0x03
    24bc:	9c 81       	ldd	r25, Y+4	; 0x04
    24be:	01 97       	sbiw	r24, 0x01	; 1
    24c0:	f1 f7       	brne	.-4      	; 0x24be <LCD_displayCharacter+0x388>
    24c2:	9c 83       	std	Y+4, r25	; 0x04
    24c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c6:	8d 81       	ldd	r24, Y+5	; 0x05
    24c8:	9e 81       	ldd	r25, Y+6	; 0x06
    24ca:	01 97       	sbiw	r24, 0x01	; 1
    24cc:	9e 83       	std	Y+6, r25	; 0x06
    24ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d0:	8d 81       	ldd	r24, Y+5	; 0x05
    24d2:	9e 81       	ldd	r25, Y+6	; 0x06
    24d4:	00 97       	sbiw	r24, 0x00	; 0
    24d6:	69 f7       	brne	.-38     	; 0x24b2 <LCD_displayCharacter+0x37c>
    24d8:	14 c0       	rjmp	.+40     	; 0x2502 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24da:	6f 81       	ldd	r22, Y+7	; 0x07
    24dc:	78 85       	ldd	r23, Y+8	; 0x08
    24de:	89 85       	ldd	r24, Y+9	; 0x09
    24e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	9e 83       	std	Y+6, r25	; 0x06
    24ec:	8d 83       	std	Y+5, r24	; 0x05
    24ee:	8d 81       	ldd	r24, Y+5	; 0x05
    24f0:	9e 81       	ldd	r25, Y+6	; 0x06
    24f2:	9a 83       	std	Y+2, r25	; 0x02
    24f4:	89 83       	std	Y+1, r24	; 0x01
    24f6:	89 81       	ldd	r24, Y+1	; 0x01
    24f8:	9a 81       	ldd	r25, Y+2	; 0x02
    24fa:	01 97       	sbiw	r24, 0x01	; 1
    24fc:	f1 f7       	brne	.-4      	; 0x24fa <LCD_displayCharacter+0x3c4>
    24fe:	9a 83       	std	Y+2, r25	; 0x02
    2500:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2502:	e9 96       	adiw	r28, 0x39	; 57
    2504:	0f b6       	in	r0, 0x3f	; 63
    2506:	f8 94       	cli
    2508:	de bf       	out	0x3e, r29	; 62
    250a:	0f be       	out	0x3f, r0	; 63
    250c:	cd bf       	out	0x3d, r28	; 61
    250e:	cf 91       	pop	r28
    2510:	df 91       	pop	r29
    2512:	08 95       	ret

00002514 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2514:	df 93       	push	r29
    2516:	cf 93       	push	r28
    2518:	00 d0       	rcall	.+0      	; 0x251a <LCD_displayString+0x6>
    251a:	0f 92       	push	r0
    251c:	cd b7       	in	r28, 0x3d	; 61
    251e:	de b7       	in	r29, 0x3e	; 62
    2520:	9b 83       	std	Y+3, r25	; 0x03
    2522:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2524:	19 82       	std	Y+1, r1	; 0x01
    2526:	0e c0       	rjmp	.+28     	; 0x2544 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2528:	89 81       	ldd	r24, Y+1	; 0x01
    252a:	28 2f       	mov	r18, r24
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	8a 81       	ldd	r24, Y+2	; 0x02
    2530:	9b 81       	ldd	r25, Y+3	; 0x03
    2532:	fc 01       	movw	r30, r24
    2534:	e2 0f       	add	r30, r18
    2536:	f3 1f       	adc	r31, r19
    2538:	80 81       	ld	r24, Z
    253a:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_displayCharacter>
		i++;
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	8f 5f       	subi	r24, 0xFF	; 255
    2542:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2544:	89 81       	ldd	r24, Y+1	; 0x01
    2546:	28 2f       	mov	r18, r24
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	8a 81       	ldd	r24, Y+2	; 0x02
    254c:	9b 81       	ldd	r25, Y+3	; 0x03
    254e:	fc 01       	movw	r30, r24
    2550:	e2 0f       	add	r30, r18
    2552:	f3 1f       	adc	r31, r19
    2554:	80 81       	ld	r24, Z
    2556:	88 23       	and	r24, r24
    2558:	39 f7       	brne	.-50     	; 0x2528 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    255a:	0f 90       	pop	r0
    255c:	0f 90       	pop	r0
    255e:	0f 90       	pop	r0
    2560:	cf 91       	pop	r28
    2562:	df 91       	pop	r29
    2564:	08 95       	ret

00002566 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2566:	df 93       	push	r29
    2568:	cf 93       	push	r28
    256a:	00 d0       	rcall	.+0      	; 0x256c <LCD_moveCursor+0x6>
    256c:	00 d0       	rcall	.+0      	; 0x256e <LCD_moveCursor+0x8>
    256e:	0f 92       	push	r0
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
    2574:	8a 83       	std	Y+2, r24	; 0x02
    2576:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2578:	8a 81       	ldd	r24, Y+2	; 0x02
    257a:	28 2f       	mov	r18, r24
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	3d 83       	std	Y+5, r19	; 0x05
    2580:	2c 83       	std	Y+4, r18	; 0x04
    2582:	8c 81       	ldd	r24, Y+4	; 0x04
    2584:	9d 81       	ldd	r25, Y+5	; 0x05
    2586:	81 30       	cpi	r24, 0x01	; 1
    2588:	91 05       	cpc	r25, r1
    258a:	c1 f0       	breq	.+48     	; 0x25bc <LCD_moveCursor+0x56>
    258c:	2c 81       	ldd	r18, Y+4	; 0x04
    258e:	3d 81       	ldd	r19, Y+5	; 0x05
    2590:	22 30       	cpi	r18, 0x02	; 2
    2592:	31 05       	cpc	r19, r1
    2594:	2c f4       	brge	.+10     	; 0x25a0 <LCD_moveCursor+0x3a>
    2596:	8c 81       	ldd	r24, Y+4	; 0x04
    2598:	9d 81       	ldd	r25, Y+5	; 0x05
    259a:	00 97       	sbiw	r24, 0x00	; 0
    259c:	61 f0       	breq	.+24     	; 0x25b6 <LCD_moveCursor+0x50>
    259e:	19 c0       	rjmp	.+50     	; 0x25d2 <LCD_moveCursor+0x6c>
    25a0:	2c 81       	ldd	r18, Y+4	; 0x04
    25a2:	3d 81       	ldd	r19, Y+5	; 0x05
    25a4:	22 30       	cpi	r18, 0x02	; 2
    25a6:	31 05       	cpc	r19, r1
    25a8:	69 f0       	breq	.+26     	; 0x25c4 <LCD_moveCursor+0x5e>
    25aa:	8c 81       	ldd	r24, Y+4	; 0x04
    25ac:	9d 81       	ldd	r25, Y+5	; 0x05
    25ae:	83 30       	cpi	r24, 0x03	; 3
    25b0:	91 05       	cpc	r25, r1
    25b2:	61 f0       	breq	.+24     	; 0x25cc <LCD_moveCursor+0x66>
    25b4:	0e c0       	rjmp	.+28     	; 0x25d2 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    25b6:	8b 81       	ldd	r24, Y+3	; 0x03
    25b8:	89 83       	std	Y+1, r24	; 0x01
    25ba:	0b c0       	rjmp	.+22     	; 0x25d2 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    25bc:	8b 81       	ldd	r24, Y+3	; 0x03
    25be:	80 5c       	subi	r24, 0xC0	; 192
    25c0:	89 83       	std	Y+1, r24	; 0x01
    25c2:	07 c0       	rjmp	.+14     	; 0x25d2 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    25c4:	8b 81       	ldd	r24, Y+3	; 0x03
    25c6:	80 5f       	subi	r24, 0xF0	; 240
    25c8:	89 83       	std	Y+1, r24	; 0x01
    25ca:	03 c0       	rjmp	.+6      	; 0x25d2 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    25cc:	8b 81       	ldd	r24, Y+3	; 0x03
    25ce:	80 5b       	subi	r24, 0xB0	; 176
    25d0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    25d2:	89 81       	ldd	r24, Y+1	; 0x01
    25d4:	80 68       	ori	r24, 0x80	; 128
    25d6:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_sendCommand>
}
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	0f 90       	pop	r0
    25e4:	cf 91       	pop	r28
    25e6:	df 91       	pop	r29
    25e8:	08 95       	ret

000025ea <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    25ea:	df 93       	push	r29
    25ec:	cf 93       	push	r28
    25ee:	00 d0       	rcall	.+0      	; 0x25f0 <LCD_displayStringRowColumn+0x6>
    25f0:	00 d0       	rcall	.+0      	; 0x25f2 <LCD_displayStringRowColumn+0x8>
    25f2:	cd b7       	in	r28, 0x3d	; 61
    25f4:	de b7       	in	r29, 0x3e	; 62
    25f6:	89 83       	std	Y+1, r24	; 0x01
    25f8:	6a 83       	std	Y+2, r22	; 0x02
    25fa:	5c 83       	std	Y+4, r21	; 0x04
    25fc:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    25fe:	89 81       	ldd	r24, Y+1	; 0x01
    2600:	6a 81       	ldd	r22, Y+2	; 0x02
    2602:	0e 94 b3 12 	call	0x2566	; 0x2566 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2606:	8b 81       	ldd	r24, Y+3	; 0x03
    2608:	9c 81       	ldd	r25, Y+4	; 0x04
    260a:	0e 94 8a 12 	call	0x2514	; 0x2514 <LCD_displayString>
}
    260e:	0f 90       	pop	r0
    2610:	0f 90       	pop	r0
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	cf 91       	pop	r28
    2618:	df 91       	pop	r29
    261a:	08 95       	ret

0000261c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    261c:	df 93       	push	r29
    261e:	cf 93       	push	r28
    2620:	cd b7       	in	r28, 0x3d	; 61
    2622:	de b7       	in	r29, 0x3e	; 62
    2624:	62 97       	sbiw	r28, 0x12	; 18
    2626:	0f b6       	in	r0, 0x3f	; 63
    2628:	f8 94       	cli
    262a:	de bf       	out	0x3e, r29	; 62
    262c:	0f be       	out	0x3f, r0	; 63
    262e:	cd bf       	out	0x3d, r28	; 61
    2630:	9a 8b       	std	Y+18, r25	; 0x12
    2632:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2634:	89 89       	ldd	r24, Y+17	; 0x11
    2636:	9a 89       	ldd	r25, Y+18	; 0x12
    2638:	9e 01       	movw	r18, r28
    263a:	2f 5f       	subi	r18, 0xFF	; 255
    263c:	3f 4f       	sbci	r19, 0xFF	; 255
    263e:	b9 01       	movw	r22, r18
    2640:	4a e0       	ldi	r20, 0x0A	; 10
    2642:	50 e0       	ldi	r21, 0x00	; 0
    2644:	0e 94 fd 13 	call	0x27fa	; 0x27fa <itoa>
   LCD_displayString(buff); /* Display the string */
    2648:	ce 01       	movw	r24, r28
    264a:	01 96       	adiw	r24, 0x01	; 1
    264c:	0e 94 8a 12 	call	0x2514	; 0x2514 <LCD_displayString>
}
    2650:	62 96       	adiw	r28, 0x12	; 18
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	f8 94       	cli
    2656:	de bf       	out	0x3e, r29	; 62
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	cd bf       	out	0x3d, r28	; 61
    265c:	cf 91       	pop	r28
    265e:	df 91       	pop	r29
    2660:	08 95       	ret

00002662 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2662:	df 93       	push	r29
    2664:	cf 93       	push	r28
    2666:	cd b7       	in	r28, 0x3d	; 61
    2668:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_sendCommand>
}
    2670:	cf 91       	pop	r28
    2672:	df 91       	pop	r29
    2674:	08 95       	ret

00002676 <LM35_getTemperature>:
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint8 LM35_getTemperature(void)
{
    2676:	df 93       	push	r29
    2678:	cf 93       	push	r28
    267a:	00 d0       	rcall	.+0      	; 0x267c <LM35_getTemperature+0x6>
    267c:	0f 92       	push	r0
    267e:	cd b7       	in	r28, 0x3d	; 61
    2680:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value = 0;
    2682:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adc_value = 0;
    2684:	1a 82       	std	Y+2, r1	; 0x02
    2686:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	0e 94 57 0a 	call	0x14ae	; 0x14ae <ADC_readChannel>
    268e:	9a 83       	std	Y+2, r25	; 0x02
    2690:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    2692:	89 81       	ldd	r24, Y+1	; 0x01
    2694:	9a 81       	ldd	r25, Y+2	; 0x02
    2696:	cc 01       	movw	r24, r24
    2698:	a0 e0       	ldi	r26, 0x00	; 0
    269a:	b0 e0       	ldi	r27, 0x00	; 0
    269c:	26 e9       	ldi	r18, 0x96	; 150
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	40 e0       	ldi	r20, 0x00	; 0
    26a2:	50 e0       	ldi	r21, 0x00	; 0
    26a4:	bc 01       	movw	r22, r24
    26a6:	cd 01       	movw	r24, r26
    26a8:	0e 94 80 13 	call	0x2700	; 0x2700 <__mulsi3>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	bc 01       	movw	r22, r24
    26b2:	cd 01       	movw	r24, r26
    26b4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	bc 01       	movw	r22, r24
    26be:	cd 01       	movw	r24, r26
    26c0:	2a e0       	ldi	r18, 0x0A	; 10
    26c2:	37 ed       	ldi	r19, 0xD7	; 215
    26c4:	43 e2       	ldi	r20, 0x23	; 35
    26c6:	50 e4       	ldi	r21, 0x40	; 64
    26c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	bc 01       	movw	r22, r24
    26d2:	cd 01       	movw	r24, r26
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	30 ed       	ldi	r19, 0xD0	; 208
    26d8:	4f eb       	ldi	r20, 0xBF	; 191
    26da:	54 e4       	ldi	r21, 0x44	; 68
    26dc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	bc 01       	movw	r22, r24
    26e6:	cd 01       	movw	r24, r26
    26e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	8b 83       	std	Y+3, r24	; 0x03

	return temp_value;
    26f2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    26f4:	0f 90       	pop	r0
    26f6:	0f 90       	pop	r0
    26f8:	0f 90       	pop	r0
    26fa:	cf 91       	pop	r28
    26fc:	df 91       	pop	r29
    26fe:	08 95       	ret

00002700 <__mulsi3>:
    2700:	62 9f       	mul	r22, r18
    2702:	d0 01       	movw	r26, r0
    2704:	73 9f       	mul	r23, r19
    2706:	f0 01       	movw	r30, r0
    2708:	82 9f       	mul	r24, r18
    270a:	e0 0d       	add	r30, r0
    270c:	f1 1d       	adc	r31, r1
    270e:	64 9f       	mul	r22, r20
    2710:	e0 0d       	add	r30, r0
    2712:	f1 1d       	adc	r31, r1
    2714:	92 9f       	mul	r25, r18
    2716:	f0 0d       	add	r31, r0
    2718:	83 9f       	mul	r24, r19
    271a:	f0 0d       	add	r31, r0
    271c:	74 9f       	mul	r23, r20
    271e:	f0 0d       	add	r31, r0
    2720:	65 9f       	mul	r22, r21
    2722:	f0 0d       	add	r31, r0
    2724:	99 27       	eor	r25, r25
    2726:	72 9f       	mul	r23, r18
    2728:	b0 0d       	add	r27, r0
    272a:	e1 1d       	adc	r30, r1
    272c:	f9 1f       	adc	r31, r25
    272e:	63 9f       	mul	r22, r19
    2730:	b0 0d       	add	r27, r0
    2732:	e1 1d       	adc	r30, r1
    2734:	f9 1f       	adc	r31, r25
    2736:	bd 01       	movw	r22, r26
    2738:	cf 01       	movw	r24, r30
    273a:	11 24       	eor	r1, r1
    273c:	08 95       	ret

0000273e <__divmodhi4>:
    273e:	97 fb       	bst	r25, 7
    2740:	09 2e       	mov	r0, r25
    2742:	07 26       	eor	r0, r23
    2744:	0a d0       	rcall	.+20     	; 0x275a <__divmodhi4_neg1>
    2746:	77 fd       	sbrc	r23, 7
    2748:	04 d0       	rcall	.+8      	; 0x2752 <__divmodhi4_neg2>
    274a:	0c d0       	rcall	.+24     	; 0x2764 <__udivmodhi4>
    274c:	06 d0       	rcall	.+12     	; 0x275a <__divmodhi4_neg1>
    274e:	00 20       	and	r0, r0
    2750:	1a f4       	brpl	.+6      	; 0x2758 <__divmodhi4_exit>

00002752 <__divmodhi4_neg2>:
    2752:	70 95       	com	r23
    2754:	61 95       	neg	r22
    2756:	7f 4f       	sbci	r23, 0xFF	; 255

00002758 <__divmodhi4_exit>:
    2758:	08 95       	ret

0000275a <__divmodhi4_neg1>:
    275a:	f6 f7       	brtc	.-4      	; 0x2758 <__divmodhi4_exit>
    275c:	90 95       	com	r25
    275e:	81 95       	neg	r24
    2760:	9f 4f       	sbci	r25, 0xFF	; 255
    2762:	08 95       	ret

00002764 <__udivmodhi4>:
    2764:	aa 1b       	sub	r26, r26
    2766:	bb 1b       	sub	r27, r27
    2768:	51 e1       	ldi	r21, 0x11	; 17
    276a:	07 c0       	rjmp	.+14     	; 0x277a <__udivmodhi4_ep>

0000276c <__udivmodhi4_loop>:
    276c:	aa 1f       	adc	r26, r26
    276e:	bb 1f       	adc	r27, r27
    2770:	a6 17       	cp	r26, r22
    2772:	b7 07       	cpc	r27, r23
    2774:	10 f0       	brcs	.+4      	; 0x277a <__udivmodhi4_ep>
    2776:	a6 1b       	sub	r26, r22
    2778:	b7 0b       	sbc	r27, r23

0000277a <__udivmodhi4_ep>:
    277a:	88 1f       	adc	r24, r24
    277c:	99 1f       	adc	r25, r25
    277e:	5a 95       	dec	r21
    2780:	a9 f7       	brne	.-22     	; 0x276c <__udivmodhi4_loop>
    2782:	80 95       	com	r24
    2784:	90 95       	com	r25
    2786:	bc 01       	movw	r22, r24
    2788:	cd 01       	movw	r24, r26
    278a:	08 95       	ret

0000278c <__prologue_saves__>:
    278c:	2f 92       	push	r2
    278e:	3f 92       	push	r3
    2790:	4f 92       	push	r4
    2792:	5f 92       	push	r5
    2794:	6f 92       	push	r6
    2796:	7f 92       	push	r7
    2798:	8f 92       	push	r8
    279a:	9f 92       	push	r9
    279c:	af 92       	push	r10
    279e:	bf 92       	push	r11
    27a0:	cf 92       	push	r12
    27a2:	df 92       	push	r13
    27a4:	ef 92       	push	r14
    27a6:	ff 92       	push	r15
    27a8:	0f 93       	push	r16
    27aa:	1f 93       	push	r17
    27ac:	cf 93       	push	r28
    27ae:	df 93       	push	r29
    27b0:	cd b7       	in	r28, 0x3d	; 61
    27b2:	de b7       	in	r29, 0x3e	; 62
    27b4:	ca 1b       	sub	r28, r26
    27b6:	db 0b       	sbc	r29, r27
    27b8:	0f b6       	in	r0, 0x3f	; 63
    27ba:	f8 94       	cli
    27bc:	de bf       	out	0x3e, r29	; 62
    27be:	0f be       	out	0x3f, r0	; 63
    27c0:	cd bf       	out	0x3d, r28	; 61
    27c2:	09 94       	ijmp

000027c4 <__epilogue_restores__>:
    27c4:	2a 88       	ldd	r2, Y+18	; 0x12
    27c6:	39 88       	ldd	r3, Y+17	; 0x11
    27c8:	48 88       	ldd	r4, Y+16	; 0x10
    27ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    27cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    27ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    27d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    27d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    27d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    27d6:	b9 84       	ldd	r11, Y+9	; 0x09
    27d8:	c8 84       	ldd	r12, Y+8	; 0x08
    27da:	df 80       	ldd	r13, Y+7	; 0x07
    27dc:	ee 80       	ldd	r14, Y+6	; 0x06
    27de:	fd 80       	ldd	r15, Y+5	; 0x05
    27e0:	0c 81       	ldd	r16, Y+4	; 0x04
    27e2:	1b 81       	ldd	r17, Y+3	; 0x03
    27e4:	aa 81       	ldd	r26, Y+2	; 0x02
    27e6:	b9 81       	ldd	r27, Y+1	; 0x01
    27e8:	ce 0f       	add	r28, r30
    27ea:	d1 1d       	adc	r29, r1
    27ec:	0f b6       	in	r0, 0x3f	; 63
    27ee:	f8 94       	cli
    27f0:	de bf       	out	0x3e, r29	; 62
    27f2:	0f be       	out	0x3f, r0	; 63
    27f4:	cd bf       	out	0x3d, r28	; 61
    27f6:	ed 01       	movw	r28, r26
    27f8:	08 95       	ret

000027fa <itoa>:
    27fa:	fb 01       	movw	r30, r22
    27fc:	9f 01       	movw	r18, r30
    27fe:	e8 94       	clt
    2800:	42 30       	cpi	r20, 0x02	; 2
    2802:	c4 f0       	brlt	.+48     	; 0x2834 <itoa+0x3a>
    2804:	45 32       	cpi	r20, 0x25	; 37
    2806:	b4 f4       	brge	.+44     	; 0x2834 <itoa+0x3a>
    2808:	4a 30       	cpi	r20, 0x0A	; 10
    280a:	29 f4       	brne	.+10     	; 0x2816 <itoa+0x1c>
    280c:	97 fb       	bst	r25, 7
    280e:	1e f4       	brtc	.+6      	; 0x2816 <itoa+0x1c>
    2810:	90 95       	com	r25
    2812:	81 95       	neg	r24
    2814:	9f 4f       	sbci	r25, 0xFF	; 255
    2816:	64 2f       	mov	r22, r20
    2818:	77 27       	eor	r23, r23
    281a:	0e 94 b2 13 	call	0x2764	; 0x2764 <__udivmodhi4>
    281e:	80 5d       	subi	r24, 0xD0	; 208
    2820:	8a 33       	cpi	r24, 0x3A	; 58
    2822:	0c f0       	brlt	.+2      	; 0x2826 <itoa+0x2c>
    2824:	89 5d       	subi	r24, 0xD9	; 217
    2826:	81 93       	st	Z+, r24
    2828:	cb 01       	movw	r24, r22
    282a:	00 97       	sbiw	r24, 0x00	; 0
    282c:	a1 f7       	brne	.-24     	; 0x2816 <itoa+0x1c>
    282e:	16 f4       	brtc	.+4      	; 0x2834 <itoa+0x3a>
    2830:	5d e2       	ldi	r21, 0x2D	; 45
    2832:	51 93       	st	Z+, r21
    2834:	10 82       	st	Z, r1
    2836:	c9 01       	movw	r24, r18
    2838:	0c 94 1e 14 	jmp	0x283c	; 0x283c <strrev>

0000283c <strrev>:
    283c:	dc 01       	movw	r26, r24
    283e:	fc 01       	movw	r30, r24
    2840:	67 2f       	mov	r22, r23
    2842:	71 91       	ld	r23, Z+
    2844:	77 23       	and	r23, r23
    2846:	e1 f7       	brne	.-8      	; 0x2840 <strrev+0x4>
    2848:	32 97       	sbiw	r30, 0x02	; 2
    284a:	04 c0       	rjmp	.+8      	; 0x2854 <strrev+0x18>
    284c:	7c 91       	ld	r23, X
    284e:	6d 93       	st	X+, r22
    2850:	70 83       	st	Z, r23
    2852:	62 91       	ld	r22, -Z
    2854:	ae 17       	cp	r26, r30
    2856:	bf 07       	cpc	r27, r31
    2858:	c8 f3       	brcs	.-14     	; 0x284c <strrev+0x10>
    285a:	08 95       	ret

0000285c <_exit>:
    285c:	f8 94       	cli

0000285e <__stop_program>:
    285e:	ff cf       	rjmp	.-2      	; 0x285e <__stop_program>
